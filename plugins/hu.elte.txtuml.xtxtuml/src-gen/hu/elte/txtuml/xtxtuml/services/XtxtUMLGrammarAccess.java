/*
 * generated by Xtext
 */
package hu.elte.txtuml.xtxtuml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XtxtUMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TUFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUFile");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTUModelDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cPackageKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0_1_0 = (RuleCall)cNameAssignment_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cImportSectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_1_1_0 = (RuleCall)cImportSectionAssignment_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsTUModelElementParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//// Start rule
		//TUFile:
		//	TUModelDeclaration | ("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=TUModelElement*;
		@Override public ParserRule getRule() { return rule; }

		//TUModelDeclaration | ("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=TUModelElement*
		public Alternatives getAlternatives() { return cAlternatives; }

		//TUModelDeclaration
		public RuleCall getTUModelDeclarationParserRuleCall_0() { return cTUModelDeclarationParserRuleCall_0; }

		//("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=TUModelElement*
		public Group getGroup_1() { return cGroup_1; }

		//("package" name=QualifiedName ";"?)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"package"
		public Keyword getPackageKeyword_1_0_0() { return cPackageKeyword_1_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0_1_0() { return cNameQualifiedNameParserRuleCall_1_0_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_0_2() { return cSemicolonKeyword_1_0_2; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_1_1() { return cImportSectionAssignment_1_1; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_1_1_0() { return cImportSectionXImportSectionParserRuleCall_1_1_0; }

		//elements+=TUModelElement*
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }

		//TUModelElement
		public RuleCall getElementsTUModelElementParserRuleCall_1_2_0() { return cElementsTUModelElementParserRuleCall_1_2_0; }
	}

	public class TUModelDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUModelDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTUModelDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TUModelDeclaration:
		//	{TUModelDeclaration} "model" name=STRING? ";";
		@Override public ParserRule getRule() { return rule; }

		//{TUModelDeclaration} "model" name=STRING? ";"
		public Group getGroup() { return cGroup; }

		//{TUModelDeclaration}
		public Action getTUModelDeclarationAction_0() { return cTUModelDeclarationAction_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//name=STRING?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TUModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTUExecutionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTUSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTUClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTUAssociationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Model level
		//TUModelElement:
		//	TUExecution | TUSignal | TUClass | TUAssociation;
		@Override public ParserRule getRule() { return rule; }

		//TUExecution | TUSignal | TUClass | TUAssociation
		public Alternatives getAlternatives() { return cAlternatives; }

		//TUExecution
		public RuleCall getTUExecutionParserRuleCall_0() { return cTUExecutionParserRuleCall_0; }

		//TUSignal
		public RuleCall getTUSignalParserRuleCall_1() { return cTUSignalParserRuleCall_1; }

		//TUClass
		public RuleCall getTUClassParserRuleCall_2() { return cTUClassParserRuleCall_2; }

		//TUAssociation
		public RuleCall getTUAssociationParserRuleCall_3() { return cTUAssociationParserRuleCall_3; }
	}

	public class TUExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//TUExecution:
		//	"execution" name=ValidID body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//"execution" name=ValidID body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"execution"
		public Keyword getExecutionKeyword_0() { return cExecutionKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_2_0() { return cBodyXBlockExpressionParserRuleCall_2_0; }
	}

	public class TUSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cAttributesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cAttributesTUSignalAttributeParserRuleCall_2_0_1_0 = (RuleCall)cAttributesAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//TUSignal:
		//	"signal" name=ValidID ("{" attributes+=TUSignalAttribute* "}" ";"? | ";");
		@Override public ParserRule getRule() { return rule; }

		//"signal" name=ValidID ("{" attributes+=TUSignalAttribute* "}" ";"? | ";")
		public Group getGroup() { return cGroup; }

		//"signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"{" attributes+=TUSignalAttribute* "}" ";"? | ";"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" attributes+=TUSignalAttribute* "}" ";"?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//attributes+=TUSignalAttribute*
		public Assignment getAttributesAssignment_2_0_1() { return cAttributesAssignment_2_0_1; }

		//TUSignalAttribute
		public RuleCall getAttributesTUSignalAttributeParserRuleCall_2_0_1_0() { return cAttributesTUSignalAttributeParserRuleCall_2_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//";"?
		public Keyword getSemicolonKeyword_2_0_3() { return cSemicolonKeyword_2_0_3; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class TUClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperClassTUClassCrossReference_2_1_0 = (CrossReference)cSuperClassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperClassTUClassQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperClassTUClassCrossReference_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cMembersAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cMembersTUClassMemberParserRuleCall_3_0_1_0 = (RuleCall)cMembersAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//TUClass:
		//	"class" name=ValidID ("extends" superClass=[TUClass|QualifiedName])? ("{" members+=TUClassMember* "}" ";"? | ";");
		@Override public ParserRule getRule() { return rule; }

		//"class" name=ValidID ("extends" superClass=[TUClass|QualifiedName])? ("{" members+=TUClassMember* "}" ";"? | ";")
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("extends" superClass=[TUClass|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superClass=[TUClass|QualifiedName]
		public Assignment getSuperClassAssignment_2_1() { return cSuperClassAssignment_2_1; }

		//[TUClass|QualifiedName]
		public CrossReference getSuperClassTUClassCrossReference_2_1_0() { return cSuperClassTUClassCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperClassTUClassQualifiedNameParserRuleCall_2_1_0_1() { return cSuperClassTUClassQualifiedNameParserRuleCall_2_1_0_1; }

		//"{" members+=TUClassMember* "}" ";"? | ";"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"{" members+=TUClassMember* "}" ";"?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }

		//members+=TUClassMember*
		public Assignment getMembersAssignment_3_0_1() { return cMembersAssignment_3_0_1; }

		//TUClassMember
		public RuleCall getMembersTUClassMemberParserRuleCall_3_0_1_0() { return cMembersTUClassMemberParserRuleCall_3_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }

		//";"?
		public Keyword getSemicolonKeyword_3_0_3() { return cSemicolonKeyword_3_0_3; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class TUAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndsTUAssociationEndParserRuleCall_3_0 = (RuleCall)cEndsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TUAssociation:
		//	"association" name=ValidID "{" ends+=TUAssociationEnd* "}";
		@Override public ParserRule getRule() { return rule; }

		//"association" name=ValidID "{" ends+=TUAssociationEnd* "}"
		public Group getGroup() { return cGroup; }

		//"association"
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ends+=TUAssociationEnd*
		public Assignment getEndsAssignment_3() { return cEndsAssignment_3; }

		//TUAssociationEnd
		public RuleCall getEndsTUAssociationEndParserRuleCall_3_0() { return cEndsTUAssociationEndParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TUSignalAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUSignalAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityTUVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Inner element level
		//// Signal- and Class-related
		/// *
		// * TODO replace with general TUAttribute
		// * / TUSignalAttribute:
		//	visibility=TUVisibility? type=JvmTypeReference name=ValidID ";";
		@Override public ParserRule getRule() { return rule; }

		//visibility=TUVisibility? type=JvmTypeReference name=ValidID ";"
		public Group getGroup() { return cGroup; }

		//visibility=TUVisibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//TUVisibility
		public RuleCall getVisibilityTUVisibilityEnumRuleCall_0_0() { return cVisibilityTUVisibilityEnumRuleCall_0_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TUClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUClassMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTUConstructorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTUAttributeOrOperationDeclarationPrefixParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cTUAttributePrefixAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0_1_0 = (RuleCall)cNameAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_0_2 = (Keyword)cGroup_1_1_0.eContents().get(2);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cTUOperationPrefixAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Group cGroup_1_1_1_3 = (Group)cGroup_1_1_1.eContents().get(3);
		private final Assignment cParametersAssignment_1_1_1_3_0 = (Assignment)cGroup_1_1_1_3.eContents().get(0);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_1_1_1_3_0_0 = (RuleCall)cParametersAssignment_1_1_1_3_0.eContents().get(0);
		private final Group cGroup_1_1_1_3_1 = (Group)cGroup_1_1_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_3_1_0 = (Keyword)cGroup_1_1_1_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1_3_1_1 = (Assignment)cGroup_1_1_1_3_1.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_1_1_1_3_1_1_0 = (RuleCall)cParametersAssignment_1_1_1_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_4 = (Keyword)cGroup_1_1_1.eContents().get(4);
		private final Assignment cBodyAssignment_1_1_1_5 = (Assignment)cGroup_1_1_1.eContents().get(5);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_1_1_1_5_0 = (RuleCall)cBodyAssignment_1_1_1_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_6 = (Keyword)cGroup_1_1_1.eContents().get(6);
		private final RuleCall cTUStateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTUTransitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		// * TODO left-factoring is no longer necessary
		// * / TUClassMember:
		//	TUConstructor | TUAttributeOrOperationDeclarationPrefix ({TUAttribute.prefix=current} name=ValidID ";" |
		//	{TUOperation.prefix=current} name=ValidID "(" (parameters+=FullJvmFormalParameter (","
		//	parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression ";"?) | TUState | TUTransition;
		@Override public ParserRule getRule() { return rule; }

		//TUConstructor | TUAttributeOrOperationDeclarationPrefix ({TUAttribute.prefix=current} name=ValidID ";" |
		//{TUOperation.prefix=current} name=ValidID "(" (parameters+=FullJvmFormalParameter (","
		//parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression ";"?) | TUState | TUTransition
		public Alternatives getAlternatives() { return cAlternatives; }

		//TUConstructor
		public RuleCall getTUConstructorParserRuleCall_0() { return cTUConstructorParserRuleCall_0; }

		//TUAttributeOrOperationDeclarationPrefix ({TUAttribute.prefix=current} name=ValidID ";" | {TUOperation.prefix=current}
		//name=ValidID "(" (parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)? ")"
		//body=XBlockExpression ";"?)
		public Group getGroup_1() { return cGroup_1; }

		//TUAttributeOrOperationDeclarationPrefix
		public RuleCall getTUAttributeOrOperationDeclarationPrefixParserRuleCall_1_0() { return cTUAttributeOrOperationDeclarationPrefixParserRuleCall_1_0; }

		//{TUAttribute.prefix=current} name=ValidID ";" | {TUOperation.prefix=current} name=ValidID "("
		//(parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression ";"?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//{TUAttribute.prefix=current} name=ValidID ";"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{TUAttribute.prefix=current}
		public Action getTUAttributePrefixAction_1_1_0_0() { return cTUAttributePrefixAction_1_1_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_1_0_1() { return cNameAssignment_1_1_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0_1_0() { return cNameValidIDParserRuleCall_1_1_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0_2() { return cSemicolonKeyword_1_1_0_2; }

		//{TUOperation.prefix=current} name=ValidID "(" (parameters+=FullJvmFormalParameter (","
		//parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression ";"?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//{TUOperation.prefix=current}
		public Action getTUOperationPrefixAction_1_1_1_0() { return cTUOperationPrefixAction_1_1_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_1_1_1() { return cNameAssignment_1_1_1_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_1_1_0() { return cNameValidIDParserRuleCall_1_1_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1_2() { return cLeftParenthesisKeyword_1_1_1_2; }

		//(parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)?
		public Group getGroup_1_1_1_3() { return cGroup_1_1_1_3; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_1_1_1_3_0() { return cParametersAssignment_1_1_1_3_0; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_1_1_1_3_0_0() { return cParametersFullJvmFormalParameterParserRuleCall_1_1_1_3_0_0; }

		//("," parameters+=FullJvmFormalParameter)*
		public Group getGroup_1_1_1_3_1() { return cGroup_1_1_1_3_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_3_1_0() { return cCommaKeyword_1_1_1_3_1_0; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_1_1_1_3_1_1() { return cParametersAssignment_1_1_1_3_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_1_1_1_3_1_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_1_1_1_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_1_4() { return cRightParenthesisKeyword_1_1_1_4; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_1_1_1_5() { return cBodyAssignment_1_1_1_5; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_1_1_1_5_0() { return cBodyXBlockExpressionParserRuleCall_1_1_1_5_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1_1_6() { return cSemicolonKeyword_1_1_1_6; }

		//TUState
		public RuleCall getTUStateParserRuleCall_2() { return cTUStateParserRuleCall_2; }

		//TUTransition
		public RuleCall getTUTransitionParserRuleCall_3() { return cTUTransitionParserRuleCall_3; }
	}

	public class TUConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityTUVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TUConstructor:
		//	visibility=TUVisibility? name=ValidID "(" (parameters+=FullJvmFormalParameter (","
		//	parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression ";"?;
		@Override public ParserRule getRule() { return rule; }

		//visibility=TUVisibility? name=ValidID "(" (parameters+=FullJvmFormalParameter (","
		//parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression ";"?
		public Group getGroup() { return cGroup; }

		//visibility=TUVisibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//TUVisibility
		public RuleCall getVisibilityTUVisibilityEnumRuleCall_0_0() { return cVisibilityTUVisibilityEnumRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_3_0_0() { return cParametersFullJvmFormalParameterParserRuleCall_3_0_0; }

		//("," parameters+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_5_0() { return cBodyXBlockExpressionParserRuleCall_5_0; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class TUAttributeOrOperationDeclarationPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUAttributeOrOperationDeclarationPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityTUVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TUAttributeOrOperationDeclarationPrefix:
		//	visibility=TUVisibility? type=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//visibility=TUVisibility? type=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//visibility=TUVisibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//TUVisibility
		public RuleCall getVisibilityTUVisibilityEnumRuleCall_0_0() { return cVisibilityTUVisibilityEnumRuleCall_0_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class TUStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTUStateTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cMembersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMembersTUStateMemberParserRuleCall_2_0_1_0 = (RuleCall)cMembersAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//TUState:
		//	type=TUStateType name=ValidID ("{" members+=TUStateMember* "}" ";"? | ";");
		@Override public ParserRule getRule() { return rule; }

		//type=TUStateType name=ValidID ("{" members+=TUStateMember* "}" ";"? | ";")
		public Group getGroup() { return cGroup; }

		//type=TUStateType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TUStateType
		public RuleCall getTypeTUStateTypeEnumRuleCall_0_0() { return cTypeTUStateTypeEnumRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"{" members+=TUStateMember* "}" ";"? | ";"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" members+=TUStateMember* "}" ";"?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//members+=TUStateMember*
		public Assignment getMembersAssignment_2_0_1() { return cMembersAssignment_2_0_1; }

		//TUStateMember
		public RuleCall getMembersTUStateMemberParserRuleCall_2_0_1_0() { return cMembersTUStateMemberParserRuleCall_2_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//";"?
		public Keyword getSemicolonKeyword_2_0_3() { return cSemicolonKeyword_2_0_3; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class TUStateMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUStateMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTUStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTUEntryOrExitActivityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTUTransitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TUStateMember:
		//	TUState | TUEntryOrExitActivity | TUTransition;
		@Override public ParserRule getRule() { return rule; }

		//TUState | TUEntryOrExitActivity | TUTransition
		public Alternatives getAlternatives() { return cAlternatives; }

		//TUState
		public RuleCall getTUStateParserRuleCall_0() { return cTUStateParserRuleCall_0; }

		//TUEntryOrExitActivity
		public RuleCall getTUEntryOrExitActivityParserRuleCall_1() { return cTUEntryOrExitActivityParserRuleCall_1; }

		//TUTransition
		public RuleCall getTUTransitionParserRuleCall_2() { return cTUTransitionParserRuleCall_2; }
	}

	public class TUEntryOrExitActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUEntryOrExitActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEntryAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cEntryEntryKeyword_0_0_0 = (Keyword)cEntryAssignment_0_0.eContents().get(0);
		private final Assignment cExitAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cExitExitKeyword_0_1_0 = (Keyword)cExitAssignment_0_1.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TUEntryOrExitActivity:
		//	(entry?="entry" | exit?="exit") body=XBlockExpression ";"?;
		@Override public ParserRule getRule() { return rule; }

		//(entry?="entry" | exit?="exit") body=XBlockExpression ";"?
		public Group getGroup() { return cGroup; }

		//entry?="entry" | exit?="exit"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//entry?="entry"
		public Assignment getEntryAssignment_0_0() { return cEntryAssignment_0_0; }

		//"entry"
		public Keyword getEntryEntryKeyword_0_0_0() { return cEntryEntryKeyword_0_0_0; }

		//exit?="exit"
		public Assignment getExitAssignment_0_1() { return cExitAssignment_0_1; }

		//"exit"
		public Keyword getExitExitKeyword_0_1_0() { return cExitExitKeyword_0_1_0; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_1_0() { return cBodyXBlockExpressionParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TUTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersTUTransitionMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TUTransition:
		//	"transition" name=ValidID "{" members+=TUTransitionMember* "}" ";"?;
		@Override public ParserRule getRule() { return rule; }

		//"transition" name=ValidID "{" members+=TUTransitionMember* "}" ";"?
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//members+=TUTransitionMember*
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }

		//TUTransitionMember
		public RuleCall getMembersTUTransitionMemberParserRuleCall_3_0() { return cMembersTUTransitionMemberParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class TUTransitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUTransitionMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTUTransitionTriggerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTUTransitionVertexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTUTransitionEffectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTUTransitionGuardParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TUTransitionMember:
		//	TUTransitionTrigger | TUTransitionVertex | TUTransitionEffect | TUTransitionGuard;
		@Override public ParserRule getRule() { return rule; }

		//TUTransitionTrigger | TUTransitionVertex | TUTransitionEffect | TUTransitionGuard
		public Alternatives getAlternatives() { return cAlternatives; }

		//TUTransitionTrigger
		public RuleCall getTUTransitionTriggerParserRuleCall_0() { return cTUTransitionTriggerParserRuleCall_0; }

		//TUTransitionVertex
		public RuleCall getTUTransitionVertexParserRuleCall_1() { return cTUTransitionVertexParserRuleCall_1; }

		//TUTransitionEffect
		public RuleCall getTUTransitionEffectParserRuleCall_2() { return cTUTransitionEffectParserRuleCall_2; }

		//TUTransitionGuard
		public RuleCall getTUTransitionGuardParserRuleCall_3() { return cTUTransitionGuardParserRuleCall_3; }
	}

	public class TUTransitionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUTransitionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTriggerTUSignalCrossReference_1_0 = (CrossReference)cTriggerAssignment_1.eContents().get(0);
		private final RuleCall cTriggerTUSignalQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTriggerTUSignalCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TUTransitionTrigger:
		//	"trigger" trigger=[TUSignal|QualifiedName] ";";
		@Override public ParserRule getRule() { return rule; }

		//"trigger" trigger=[TUSignal|QualifiedName] ";"
		public Group getGroup() { return cGroup; }

		//"trigger"
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }

		//trigger=[TUSignal|QualifiedName]
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }

		//[TUSignal|QualifiedName]
		public CrossReference getTriggerTUSignalCrossReference_1_0() { return cTriggerTUSignalCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTriggerTUSignalQualifiedNameParserRuleCall_1_0_1() { return cTriggerTUSignalQualifiedNameParserRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TUTransitionVertexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUTransitionVertex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cFromFromKeyword_0_0_0 = (Keyword)cFromAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cVertexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVertexTUStateCrossReference_1_0 = (CrossReference)cVertexAssignment_1.eContents().get(0);
		private final RuleCall cVertexTUStateQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cVertexTUStateCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TUTransitionVertex:
		//	(from?="from" | "to") vertex=[TUState|QualifiedName] ";";
		@Override public ParserRule getRule() { return rule; }

		//(from?="from" | "to") vertex=[TUState|QualifiedName] ";"
		public Group getGroup() { return cGroup; }

		//from?="from" | "to"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//from?="from"
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }

		//"from"
		public Keyword getFromFromKeyword_0_0_0() { return cFromFromKeyword_0_0_0; }

		//"to"
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }

		//vertex=[TUState|QualifiedName]
		public Assignment getVertexAssignment_1() { return cVertexAssignment_1; }

		//[TUState|QualifiedName]
		public CrossReference getVertexTUStateCrossReference_1_0() { return cVertexTUStateCrossReference_1_0; }

		//QualifiedName
		public RuleCall getVertexTUStateQualifiedNameParserRuleCall_1_0_1() { return cVertexTUStateQualifiedNameParserRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TUTransitionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUTransitionEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TUTransitionEffect:
		//	"effect" body=XBlockExpression ";"?;
		@Override public ParserRule getRule() { return rule; }

		//"effect" body=XBlockExpression ";"?
		public Group getGroup() { return cGroup; }

		//"effect"
		public Keyword getEffectKeyword_0() { return cEffectKeyword_0; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_1_0() { return cBodyXBlockExpressionParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TUTransitionGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUTransitionGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cElseAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cElseElseKeyword_2_0_0 = (Keyword)cElseAssignment_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TUTransitionGuard:
		//	"guard" "(" (else?="else" | expression=XExpression) ")" ";"?;
		@Override public ParserRule getRule() { return rule; }

		//"guard" "(" (else?="else" | expression=XExpression) ")" ";"?
		public Group getGroup() { return cGroup; }

		//"guard"
		public Keyword getGuardKeyword_0() { return cGuardKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//else?="else" | expression=XExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//else?="else"
		public Assignment getElseAssignment_2_0() { return cElseAssignment_2_0; }

		//"else"
		public Keyword getElseElseKeyword_2_0_0() { return cElseElseKeyword_2_0_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_1_0() { return cExpressionXExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TUAssociationEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUAssociationEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityTUVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cNotNavigableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNavigableHiddenKeyword_1_0 = (Keyword)cNotNavigableAssignment_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityTUMultiplicityParserRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		private final Assignment cEndClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEndClassTUClassCrossReference_3_0 = (CrossReference)cEndClassAssignment_3.eContents().get(0);
		private final RuleCall cEndClassTUClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cEndClassTUClassCrossReference_3_0.eContents().get(1);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Association-related
		//TUAssociationEnd:
		//	visibility=TUVisibility? notNavigable?="hidden"? multiplicity=TUMultiplicity endClass=[TUClass|QualifiedName]
		//	name=ValidID ";";
		@Override public ParserRule getRule() { return rule; }

		//visibility=TUVisibility? notNavigable?="hidden"? multiplicity=TUMultiplicity endClass=[TUClass|QualifiedName]
		//name=ValidID ";"
		public Group getGroup() { return cGroup; }

		//visibility=TUVisibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//TUVisibility
		public RuleCall getVisibilityTUVisibilityEnumRuleCall_0_0() { return cVisibilityTUVisibilityEnumRuleCall_0_0; }

		//notNavigable?="hidden"?
		public Assignment getNotNavigableAssignment_1() { return cNotNavigableAssignment_1; }

		//"hidden"
		public Keyword getNotNavigableHiddenKeyword_1_0() { return cNotNavigableHiddenKeyword_1_0; }

		//multiplicity=TUMultiplicity
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }

		//TUMultiplicity
		public RuleCall getMultiplicityTUMultiplicityParserRuleCall_2_0() { return cMultiplicityTUMultiplicityParserRuleCall_2_0; }

		//endClass=[TUClass|QualifiedName]
		public Assignment getEndClassAssignment_3() { return cEndClassAssignment_3; }

		//[TUClass|QualifiedName]
		public CrossReference getEndClassTUClassCrossReference_3_0() { return cEndClassTUClassCrossReference_3_0; }

		//QualifiedName
		public RuleCall getEndClassTUClassQualifiedNameParserRuleCall_3_0_1() { return cEndClassTUClassQualifiedNameParserRuleCall_3_0_1; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class TUMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUMultiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLowerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLowerINTTerminalRuleCall_0_0_0 = (RuleCall)cLowerAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cUpperSetAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cUpperSetFullStopFullStopKeyword_0_1_0_0 = (Keyword)cUpperSetAssignment_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Assignment cUpperAssignment_0_1_1_0 = (Assignment)cAlternatives_0_1_1.eContents().get(0);
		private final RuleCall cUpperINTTerminalRuleCall_0_1_1_0_0 = (RuleCall)cUpperAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cUpperInfAssignment_0_1_1_1 = (Assignment)cAlternatives_0_1_1.eContents().get(1);
		private final Keyword cUpperInfAsteriskKeyword_0_1_1_1_0 = (Keyword)cUpperInfAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cAnyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cAnyAsteriskKeyword_1_0 = (Keyword)cAnyAssignment_1.eContents().get(0);
		
		//TUMultiplicity:
		//	lower=INT (upperSet?=".." (upper=INT | upperInf?="*"))? | any?="*";
		@Override public ParserRule getRule() { return rule; }

		//lower=INT (upperSet?=".." (upper=INT | upperInf?="*"))? | any?="*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//lower=INT (upperSet?=".." (upper=INT | upperInf?="*"))?
		public Group getGroup_0() { return cGroup_0; }

		//lower=INT
		public Assignment getLowerAssignment_0_0() { return cLowerAssignment_0_0; }

		//INT
		public RuleCall getLowerINTTerminalRuleCall_0_0_0() { return cLowerINTTerminalRuleCall_0_0_0; }

		//(upperSet?=".." (upper=INT | upperInf?="*"))?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//upperSet?=".."
		public Assignment getUpperSetAssignment_0_1_0() { return cUpperSetAssignment_0_1_0; }

		//".."
		public Keyword getUpperSetFullStopFullStopKeyword_0_1_0_0() { return cUpperSetFullStopFullStopKeyword_0_1_0_0; }

		//upper=INT | upperInf?="*"
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }

		//upper=INT
		public Assignment getUpperAssignment_0_1_1_0() { return cUpperAssignment_0_1_1_0; }

		//INT
		public RuleCall getUpperINTTerminalRuleCall_0_1_1_0_0() { return cUpperINTTerminalRuleCall_0_1_1_0_0; }

		//upperInf?="*"
		public Assignment getUpperInfAssignment_0_1_1_1() { return cUpperInfAssignment_0_1_1_1; }

		//"*"
		public Keyword getUpperInfAsteriskKeyword_0_1_1_1_0() { return cUpperInfAsteriskKeyword_0_1_1_1_0; }

		//any?="*"
		public Assignment getAnyAssignment_1() { return cAnyAssignment_1; }

		//"*"
		public Keyword getAnyAsteriskKeyword_1_0() { return cAnyAsteriskKeyword_1_0; }
	}

	public class RAlfSendSignalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RAlfSendSignalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRAlfSendSignalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSendKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignalXExpressionParserRuleCall_2_0 = (RuleCall)cSignalAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetXExpressionParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		
		//// rAlf
		//RAlfSendSignalExpression returns xbase::XExpression:
		//	{RAlfSendSignalExpression} "send" signal=XExpression "to" target=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//{RAlfSendSignalExpression} "send" signal=XExpression "to" target=XExpression
		public Group getGroup() { return cGroup; }

		//{RAlfSendSignalExpression}
		public Action getRAlfSendSignalExpressionAction_0() { return cRAlfSendSignalExpressionAction_0; }

		//"send"
		public Keyword getSendKeyword_1() { return cSendKeyword_1; }

		//signal=XExpression
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//XExpression
		public RuleCall getSignalXExpressionParserRuleCall_2_0() { return cSignalXExpressionParserRuleCall_2_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//target=XExpression
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//XExpression
		public RuleCall getTargetXExpressionParserRuleCall_4_0() { return cTargetXExpressionParserRuleCall_4_0; }
	}

	public class RAlfDeleteObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RAlfDeleteObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRAlfDeleteObjectExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeleteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectXExpressionParserRuleCall_2_0 = (RuleCall)cObjectAssignment_2.eContents().get(0);
		
		//RAlfDeleteObjectExpression returns xbase::XExpression:
		//	{RAlfDeleteObjectExpression} "delete" object=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//{RAlfDeleteObjectExpression} "delete" object=XExpression
		public Group getGroup() { return cGroup; }

		//{RAlfDeleteObjectExpression}
		public Action getRAlfDeleteObjectExpressionAction_0() { return cRAlfDeleteObjectExpressionAction_0; }

		//"delete"
		public Keyword getDeleteKeyword_1() { return cDeleteKeyword_1; }

		//object=XExpression
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }

		//XExpression
		public RuleCall getObjectXExpressionParserRuleCall_2_0() { return cObjectXExpressionParserRuleCall_2_0; }
	}

	public class RAlfSignalAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RAlfSignalAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRAlfSignalAccessExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSigdataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSigdataSigdataKeyword_1_0 = (Keyword)cSigdataAssignment_1.eContents().get(0);
		
		//// the sole purpose of the sigdata feature
		//// is to provide a feature for validation
		//// to put a marker on
		//RAlfSignalAccessExpression returns xbase::XExpression:
		//	{RAlfSignalAccessExpression} sigdata="sigdata";
		@Override public ParserRule getRule() { return rule; }

		//{RAlfSignalAccessExpression} sigdata="sigdata"
		public Group getGroup() { return cGroup; }

		//{RAlfSignalAccessExpression}
		public Action getRAlfSignalAccessExpressionAction_0() { return cRAlfSignalAccessExpressionAction_0; }

		//sigdata="sigdata"
		public Assignment getSigdataAssignment_1() { return cSigdataAssignment_1; }

		//"sigdata"
		public Keyword getSigdataSigdataKeyword_1_0() { return cSigdataSigdataKeyword_1_0; }
	}

	public class XRAlfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRAlfStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXRAlfStatementSemicolonNeededParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXRAlfStatementSemicolonNotNeededParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Added rAlf-Xbase rules
		/// *
		// * only for readibility reasons
		// * / XRAlfStatement returns xbase::XExpression:
		//	XRAlfStatementSemicolonNeeded | XRAlfStatementSemicolonNotNeeded;
		@Override public ParserRule getRule() { return rule; }

		//XRAlfStatementSemicolonNeeded | XRAlfStatementSemicolonNotNeeded
		public Alternatives getAlternatives() { return cAlternatives; }

		//XRAlfStatementSemicolonNeeded
		public RuleCall getXRAlfStatementSemicolonNeededParserRuleCall_0() { return cXRAlfStatementSemicolonNeededParserRuleCall_0; }

		//XRAlfStatementSemicolonNotNeeded
		public RuleCall getXRAlfStatementSemicolonNotNeededParserRuleCall_1() { return cXRAlfStatementSemicolonNotNeededParserRuleCall_1; }
	}

	public class XRAlfStatementSemicolonNotNeededElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRAlfStatementSemicolonNotNeeded");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXIfExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXForLoopExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXBasicForLoopExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXWhileExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXSwitchExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXBlockExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXVariableDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//XRAlfStatementSemicolonNotNeeded returns xbase::XExpression:
		//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XSwitchExpression |
		//	XBlockExpression | // semicolon included in rule
		//	XVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XSwitchExpression | XBlockExpression | // semicolon included in rule
		//XVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_0() { return cXIfExpressionParserRuleCall_0; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_1() { return cXForLoopExpressionParserRuleCall_1; }

		//XBasicForLoopExpression
		public RuleCall getXBasicForLoopExpressionParserRuleCall_2() { return cXBasicForLoopExpressionParserRuleCall_2; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_3() { return cXWhileExpressionParserRuleCall_3; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_4() { return cXSwitchExpressionParserRuleCall_4; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_5() { return cXBlockExpressionParserRuleCall_5; }

		//// semicolon included in rule
		//XVariableDeclaration
		public RuleCall getXVariableDeclarationParserRuleCall_6() { return cXVariableDeclarationParserRuleCall_6; }
	}

	public class XRAlfStatementSemicolonNeededElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRAlfStatementSemicolonNeeded");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXReturnExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXDoWhileExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRAlfSendSignalExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRAlfDeleteObjectExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//XRAlfStatementSemicolonNeeded returns xbase::XExpression:
		//	XReturnExpression | XDoWhileExpression | XExpression | RAlfSendSignalExpression | RAlfDeleteObjectExpression;
		@Override public ParserRule getRule() { return rule; }

		//XReturnExpression | XDoWhileExpression | XExpression | RAlfSendSignalExpression | RAlfDeleteObjectExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_0() { return cXReturnExpressionParserRuleCall_0; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_1() { return cXDoWhileExpressionParserRuleCall_1; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_2() { return cXExpressionParserRuleCall_2; }

		//RAlfSendSignalExpression
		public RuleCall getRAlfSendSignalExpressionParserRuleCall_3() { return cRAlfSendSignalExpressionParserRuleCall_3; }

		//RAlfDeleteObjectExpression
		public RuleCall getRAlfDeleteObjectExpressionParserRuleCall_4() { return cRAlfDeleteObjectExpressionParserRuleCall_4; }
	}

	public class XParenthesizedRAlfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParenthesizedRAlfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XParenthesizedRAlfExpression returns xbase::XExpression:
		//	"(" XExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" XExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Overridden Xbase rules
		/// *
		// * Changes:
		// * <ul>
		// *     <li>
		// *         Removed:
		// *         <ul>
		// *             <li>XCollectionLiteral</li>
		// *             <li>XClosure</li>
		// *             <li>XTypeLiteral</li>
		// *         </ul>
		// *     </li>
		// * </ul>
		// * / XLiteral returns xbase::XExpression:
		//	XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_0() { return cXBooleanLiteralParserRuleCall_0; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_1() { return cXNumberLiteralParserRuleCall_1; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_2() { return cXNullLiteralParserRuleCall_2; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_3() { return cXStringLiteralParserRuleCall_3; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXParenthesizedRAlfExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRAlfSignalAccessExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>
		// *         Removed: 
		// *         <ul>
		// *             <li>XBlockExpression</li>
		// *             <li>XSwitchExpression</li>
		// *             <li>XSynchronizedExpression</li>
		// *             <li>XIfExpression</li>
		// *             <li>XForLoopExpression</li>
		// *             <li>XBasicForLoopExpression</li>
		// *             <li>XWhileExpression</li>
		// *             <li>XDoWhileExpression</li>
		// *             <li>XThrowExpression</li>
		// *             <li>XReturnExpression</li>
		// *             <li>XTryCatchFinallyExpression</li>
		// *             <li>XParenthesizedExpression</li>
		// *         </ul>
		// *     </li>
		// *     <li>
		// *         Added:
		// *         <ul>
		// *             <li>XParenthesizedRAlfExpression</li>
		// *         </ul>
		// *     </li>
		// * </ul>
		// * / XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XFeatureCall | XLiteral | XParenthesizedRAlfExpression | RAlfSignalAccessExpression;
		@Override public ParserRule getRule() { return rule; }

		//XConstructorCall | XFeatureCall | XLiteral | XParenthesizedRAlfExpression | RAlfSignalAccessExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_1() { return cXFeatureCallParserRuleCall_1; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_2() { return cXLiteralParserRuleCall_2; }

		//XParenthesizedRAlfExpression
		public RuleCall getXParenthesizedRAlfExpressionParserRuleCall_3() { return cXParenthesizedRAlfExpressionParserRuleCall_3; }

		//RAlfSignalAccessExpression
		public RuleCall getRAlfSignalAccessExpressionParserRuleCall_4() { return cRAlfSignalAccessExpressionParserRuleCall_4; }
	}

	public class XConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstructorJvmConstructorCrossReference_2_0 = (CrossReference)cConstructorAssignment_2.eContents().get(0);
		private final RuleCall cConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cConstructorJvmConstructorCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmSimpleTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cTypeArgumentsAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExplicitConstructorCallAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cExplicitConstructorCallLeftParenthesisKeyword_4_0 = (Keyword)cExplicitConstructorCallAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArgumentsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_5_0_0 = (RuleCall)cArgumentsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_5_1_1_0 = (RuleCall)cArgumentsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>at most one "simple" type argument</li>
		// *     <li>parentheses are mandatory</li>
		// *     <li>no XShortClosure in arguments</li>
		// *     <li>no XClosure after the parameter list</li>
		// * </ul>
		// * / XConstructorCall returns xbase::XExpression:
		//	{xbase::XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
		//	typeArguments+=JvmSimpleTypeReference ">")? => explicitConstructorCall?="(" (arguments+=XExpression (","
		//	arguments+=XExpression)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
		//typeArguments+=JvmSimpleTypeReference ">")? => explicitConstructorCall?="(" (arguments+=XExpression (","
		//arguments+=XExpression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{xbase::XConstructorCall}
		public Action getXConstructorCallAction_0() { return cXConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=[types::JvmConstructor|QualifiedName]
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//[types::JvmConstructor|QualifiedName]
		public CrossReference getConstructorJvmConstructorCrossReference_2_0() { return cConstructorJvmConstructorCrossReference_2_0; }

		//QualifiedName
		public RuleCall getConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1() { return cConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1; }

		//(=> "<" typeArguments+=JvmSimpleTypeReference ">")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//typeArguments+=JvmSimpleTypeReference
		public Assignment getTypeArgumentsAssignment_3_1() { return cTypeArgumentsAssignment_3_1; }

		//JvmSimpleTypeReference
		public RuleCall getTypeArgumentsJvmSimpleTypeReferenceParserRuleCall_3_1_0() { return cTypeArgumentsJvmSimpleTypeReferenceParserRuleCall_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }

		//=> explicitConstructorCall?="("
		public Assignment getExplicitConstructorCallAssignment_4() { return cExplicitConstructorCallAssignment_4; }

		//"("
		public Keyword getExplicitConstructorCallLeftParenthesisKeyword_4_0() { return cExplicitConstructorCallLeftParenthesisKeyword_4_0; }

		//(arguments+=XExpression ("," arguments+=XExpression)*)?
		public Group getGroup_5() { return cGroup_5; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_5_0() { return cArgumentsAssignment_5_0; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_5_0_0() { return cArgumentsXExpressionParserRuleCall_5_0_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_5_1_1() { return cArgumentsAssignment_5_1_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_5_1_1_0() { return cArgumentsXExpressionParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionsXRAlfStatementSemicolonNotNeededParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cExpressionsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cExpressionsXRAlfStatementSemicolonNeededParserRuleCall_2_1_0_0 = (RuleCall)cExpressionsAssignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>restructured contained expressions</li>
		// * </ul>
		// * / XBlockExpression returns xbase::XExpression:
		//	{xbase::XBlockExpression} "{" (expressions+=XRAlfStatementSemicolonNotNeeded |
		//	expressions+=XRAlfStatementSemicolonNeeded ";")* "}";
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XBlockExpression} "{" (expressions+=XRAlfStatementSemicolonNotNeeded |
		//expressions+=XRAlfStatementSemicolonNeeded ";")* "}"
		public Group getGroup() { return cGroup; }

		//{xbase::XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=XRAlfStatementSemicolonNotNeeded | expressions+=XRAlfStatementSemicolonNeeded ";")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//expressions+=XRAlfStatementSemicolonNotNeeded
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//XRAlfStatementSemicolonNotNeeded
		public RuleCall getExpressionsXRAlfStatementSemicolonNotNeededParserRuleCall_2_0_0() { return cExpressionsXRAlfStatementSemicolonNotNeededParserRuleCall_2_0_0; }

		//expressions+=XRAlfStatementSemicolonNeeded ";"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//expressions+=XRAlfStatementSemicolonNeeded
		public Assignment getExpressionsAssignment_2_1_0() { return cExpressionsAssignment_2_1_0; }

		//XRAlfStatementSemicolonNeeded
		public RuleCall getExpressionsXRAlfStatementSemicolonNeededParserRuleCall_2_1_0_0() { return cExpressionsXRAlfStatementSemicolonNeededParserRuleCall_2_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class XWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateXExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		/// * 
		// * Changes:
		// * <ul>
		// *     <li>predicate is an XExpression instead of XExpression</li>
		// *     <li>body is an XBlockExpression instead of XExpression</li>
		// * </ul>
		// * / XWhileExpression returns xbase::XExpression:
		//	{xbase::XWhileExpression} "while" "(" predicate=XExpression ")" body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XWhileExpression} "while" "(" predicate=XExpression ")" body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//{xbase::XWhileExpression}
		public Action getXWhileExpressionAction_0() { return cXWhileExpressionAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_3_0() { return cPredicateXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_5_0() { return cBodyXBlockExpressionParserRuleCall_5_0; }
	}

	public class XDoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateXExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * 
		// * Changes:
		// * <ul>
		// *     <li>predicate is an XExpression instead of XExpression</li>
		// *     <li>body is an XBlockExpression instead of XExpression</li>
		// * </ul>
		// * / XDoWhileExpression returns xbase::XExpression:
		//	{xbase::XDoWhileExpression} "do" body=XBlockExpression "while" "(" predicate=XExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XDoWhileExpression} "do" body=XBlockExpression "while" "(" predicate=XExpression ")"
		public Group getGroup() { return cGroup; }

		//{xbase::XDoWhileExpression}
		public Action getXDoWhileExpressionAction_0() { return cXDoWhileExpressionAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_2_0() { return cBodyXBlockExpressionParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_5_0() { return cPredicateXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class XFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_2_0_0 = (Keyword)cExplicitOperationCallAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXShortClosureParserRuleCall_2_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cGroup_2_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>no closures after parentheses</li>
		// *     <li>no type parameters</li>
		// *     <li>XExpression -> XExpression</li>
		// * </ul>
		// * / XFeatureCall returns xbase::XExpression:
		//	{xbase::XFeatureCall} feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="("
		//	(featureCallArguments+=XShortClosure | featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		//	")")?;
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XFeatureCall} feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="("
		//(featureCallArguments+=XShortClosure | featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		//")")?
		public Group getGroup() { return cGroup; }

		//{xbase::XFeatureCall}
		public Action getXFeatureCallAction_0() { return cXFeatureCallAction_0; }

		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0; }

		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_0_1; }

		//(=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
		//featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_2_0() { return cExplicitOperationCallAssignment_2_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_2_0_0; }

		//(featureCallArguments+=XShortClosure | featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//featureCallArguments+=XShortClosure
		public Assignment getFeatureCallArgumentsAssignment_2_1_0() { return cFeatureCallArgumentsAssignment_2_1_0; }

		//XShortClosure
		public RuleCall getFeatureCallArgumentsXShortClosureParserRuleCall_2_1_0_0() { return cFeatureCallArgumentsXShortClosureParserRuleCall_2_1_0_0; }

		//featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_2_1_1_0() { return cFeatureCallArgumentsAssignment_2_1_1_0; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_0_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_0_0; }

		//("," featureCallArguments+=XExpression)*
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_1_0() { return cCommaKeyword_2_1_1_1_0; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_2_1_1_1_1() { return cFeatureCallArgumentsAssignment_2_1_1_1_1; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class XIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfXExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenXBlockExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cElseAlternatives_6_1_0 = (Alternatives)cElseAssignment_6_1.eContents().get(0);
		private final RuleCall cElseXIfExpressionParserRuleCall_6_1_0_0 = (RuleCall)cElseAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cElseXBlockExpressionParserRuleCall_6_1_0_1 = (RuleCall)cElseAlternatives_6_1_0.eContents().get(1);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>XBlockExpression is mandatory, except for an "else if" construct</li>
		// *     <li>XExpression -> XExpression</li>
		// * </ul>
		// * 
		// * / XIfExpression returns xbase::XExpression:
		//	{xbase::XIfExpression} "if" "(" if=XExpression ")" then=XBlockExpression ("else" else=(XIfExpression |
		//	XBlockExpression))?;
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XIfExpression} "if" "(" if=XExpression ")" then=XBlockExpression ("else" else=(XIfExpression |
		//XBlockExpression))?
		public Group getGroup() { return cGroup; }

		//{xbase::XIfExpression}
		public Action getXIfExpressionAction_0() { return cXIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=XExpression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_3_0() { return cIfXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=XBlockExpression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//XBlockExpression
		public RuleCall getThenXBlockExpressionParserRuleCall_5_0() { return cThenXBlockExpressionParserRuleCall_5_0; }

		//(=> "else" else=(XIfExpression | XBlockExpression))?
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=(XIfExpression | XBlockExpression)
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//XIfExpression | XBlockExpression
		public Alternatives getElseAlternatives_6_1_0() { return cElseAlternatives_6_1_0; }

		//XIfExpression
		public RuleCall getElseXIfExpressionParserRuleCall_6_1_0_0() { return cElseXIfExpressionParserRuleCall_6_1_0_0; }

		//XBlockExpression
		public RuleCall getElseXBlockExpressionParserRuleCall_6_1_0_1() { return cElseXBlockExpressionParserRuleCall_6_1_0_1; }
	}

	public class XForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXForLoopExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeclaredParamFullJvmFormalParameterParserRuleCall_0_0_3_0 = (RuleCall)cDeclaredParamAssignment_0_0_3.eContents().get(0);
		private final Keyword cInKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cForExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cForExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEachExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEachExpressionXBlockExpressionParserRuleCall_3_0 = (RuleCall)cEachExpressionAssignment_3.eContents().get(0);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>'in' instead of ':'</li>
		// *     <li>JvmFormalParameter -> FullJvmFormalParameter (type is mandatory)</li>
		// *     <li>XBlockExpression is mandatory</li>
		// *     <li>XExpression -> XExpression</li>
		// * </ul>
		// * / XForLoopExpression returns xbase::XExpression:
		//	=> ({xbase::XForLoopExpression} "for" "(" declaredParam=FullJvmFormalParameter "in") forExpression=XExpression ")"
		//	eachExpression=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//=> ({xbase::XForLoopExpression} "for" "(" declaredParam=FullJvmFormalParameter "in") forExpression=XExpression ")"
		//eachExpression=XBlockExpression
		public Group getGroup() { return cGroup; }

		//=> ({xbase::XForLoopExpression} "for" "(" declaredParam=FullJvmFormalParameter "in")
		public Group getGroup_0() { return cGroup_0; }

		//{xbase::XForLoopExpression} "for" "(" declaredParam=FullJvmFormalParameter "in"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{xbase::XForLoopExpression}
		public Action getXForLoopExpressionAction_0_0_0() { return cXForLoopExpressionAction_0_0_0; }

		//"for"
		public Keyword getForKeyword_0_0_1() { return cForKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }

		//declaredParam=FullJvmFormalParameter
		public Assignment getDeclaredParamAssignment_0_0_3() { return cDeclaredParamAssignment_0_0_3; }

		//FullJvmFormalParameter
		public RuleCall getDeclaredParamFullJvmFormalParameterParserRuleCall_0_0_3_0() { return cDeclaredParamFullJvmFormalParameterParserRuleCall_0_0_3_0; }

		//"in"
		public Keyword getInKeyword_0_0_4() { return cInKeyword_0_0_4; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_1() { return cForExpressionAssignment_1; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_1_0() { return cForExpressionXExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//eachExpression=XBlockExpression
		public Assignment getEachExpressionAssignment_3() { return cEachExpressionAssignment_3; }

		//XBlockExpression
		public RuleCall getEachExpressionXBlockExpressionParserRuleCall_3_0() { return cEachExpressionXBlockExpressionParserRuleCall_3_0; }
	}

	public class XSwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSwitchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSwitchXExpressionParserRuleCall_3_0 = (RuleCall)cSwitchAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCasesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCasesXCasePartParserRuleCall_6_0 = (RuleCall)cCasesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDefaultKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDefaultAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDefaultXBlockExpressionParserRuleCall_7_2_0 = (RuleCall)cDefaultAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>no variable declaration allowed</li>
		// *     <li>parentheses are mandatory</li>
		// *     <li>XExpression -> XExpression</li>
		// *     <li>default has to be a block</li>
		// * </ul>
		// * / XSwitchExpression returns xbase::XExpression:
		//	{xbase::XSwitchExpression} "switch" "(" switch=XExpression ")" "{" cases+=XCasePart* ("default" ":"
		//	default=XBlockExpression)? "}";
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XSwitchExpression} "switch" "(" switch=XExpression ")" "{" cases+=XCasePart* ("default" ":"
		//default=XBlockExpression)? "}"
		public Group getGroup() { return cGroup; }

		//{xbase::XSwitchExpression}
		public Action getXSwitchExpressionAction_0() { return cXSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//switch=XExpression
		public Assignment getSwitchAssignment_3() { return cSwitchAssignment_3; }

		//XExpression
		public RuleCall getSwitchXExpressionParserRuleCall_3_0() { return cSwitchXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//cases+=XCasePart*
		public Assignment getCasesAssignment_6() { return cCasesAssignment_6; }

		//XCasePart
		public RuleCall getCasesXCasePartParserRuleCall_6_0() { return cCasesXCasePartParserRuleCall_6_0; }

		//("default" ":" default=XBlockExpression)?
		public Group getGroup_7() { return cGroup_7; }

		//"default"
		public Keyword getDefaultKeyword_7_0() { return cDefaultKeyword_7_0; }

		//":"
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }

		//default=XBlockExpression
		public Assignment getDefaultAssignment_7_2() { return cDefaultAssignment_7_2; }

		//XBlockExpression
		public RuleCall getDefaultXBlockExpressionParserRuleCall_7_2_0() { return cDefaultXBlockExpressionParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class XCasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXCasePartAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCaseXExpressionParserRuleCall_2_0 = (RuleCall)cCaseAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cThenAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cThenXBlockExpressionParserRuleCall_3_0_1_0 = (RuleCall)cThenAssignment_3_0_1.eContents().get(0);
		private final Assignment cFallThroughAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cFallThroughCommaKeyword_3_1_0 = (Keyword)cFallThroughAssignment_3_1.eContents().get(0);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>removed type guards (thus 'case' is mandatory)</li>
		// *     <li>XExpression -> XExpression</li>
		// *     <li>then attribute can only be a block</li>
		// * </ul>
		// * / XCasePart returns xbase::XCasePart:
		//	{xbase::XCasePart} "case" case=XExpression (":" then=XBlockExpression | fallThrough?=",");
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XCasePart} "case" case=XExpression (":" then=XBlockExpression | fallThrough?=",")
		public Group getGroup() { return cGroup; }

		//{xbase::XCasePart}
		public Action getXCasePartAction_0() { return cXCasePartAction_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//case=XExpression
		public Assignment getCaseAssignment_2() { return cCaseAssignment_2; }

		//XExpression
		public RuleCall getCaseXExpressionParserRuleCall_2_0() { return cCaseXExpressionParserRuleCall_2_0; }

		//":" then=XBlockExpression | fallThrough?=","
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//":" then=XBlockExpression
		public Group getGroup_3_0() { return cGroup_3_0; }

		//":"
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }

		//then=XBlockExpression
		public Assignment getThenAssignment_3_0_1() { return cThenAssignment_3_0_1; }

		//XBlockExpression
		public RuleCall getThenXBlockExpressionParserRuleCall_3_0_1_0() { return cThenXBlockExpressionParserRuleCall_3_0_1_0; }

		//fallThrough?=","
		public Assignment getFallThroughAssignment_3_1() { return cFallThroughAssignment_3_1; }

		//","
		public Keyword getFallThroughCommaKeyword_3_1_0() { return cFallThroughCommaKeyword_3_1_0; }
	}

	public class XBasicForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBasicForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBasicForLoopExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cInitExpressionsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cInitExpressionsXExpressionParserRuleCall_3_0_0_0 = (RuleCall)cInitExpressionsAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cInitExpressionsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cInitExpressionsXVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cInitExpressionsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpdateExpressionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpdateExpressionsXExpressionParserRuleCall_6_0 = (RuleCall)cUpdateExpressionsAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEachExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEachExpressionXBlockExpressionParserRuleCall_8_0 = (RuleCall)cEachExpressionAssignment_8.eContents().get(0);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>only one init and update expression is allowed</li>
		// *     <li>changed Xbase expressions to corresponding RAlf-Xbase expressions</li>
		// *     <li>XBlockExpression is mandatory</li>
		// * </ul>
		// * / XBasicForLoopExpression returns xbase::XBasicForLoopExpression:
		//	{xbase::XBasicForLoopExpression} "for" "(" (initExpressions+=XExpression ";" | initExpressions+=XVariableDeclaration
		//	| ";") expression=XExpression? ";" updateExpressions+=XExpression? ")" eachExpression=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XBasicForLoopExpression} "for" "(" (initExpressions+=XExpression ";" | initExpressions+=XVariableDeclaration |
		//";") expression=XExpression? ";" updateExpressions+=XExpression? ")" eachExpression=XBlockExpression
		public Group getGroup() { return cGroup; }

		//{xbase::XBasicForLoopExpression}
		public Action getXBasicForLoopExpressionAction_0() { return cXBasicForLoopExpressionAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//initExpressions+=XExpression ";" | initExpressions+=XVariableDeclaration | ";"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//initExpressions+=XExpression ";"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//initExpressions+=XExpression
		public Assignment getInitExpressionsAssignment_3_0_0() { return cInitExpressionsAssignment_3_0_0; }

		//XExpression
		public RuleCall getInitExpressionsXExpressionParserRuleCall_3_0_0_0() { return cInitExpressionsXExpressionParserRuleCall_3_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }

		//initExpressions+=XVariableDeclaration
		public Assignment getInitExpressionsAssignment_3_1() { return cInitExpressionsAssignment_3_1; }

		//XVariableDeclaration
		public RuleCall getInitExpressionsXVariableDeclarationParserRuleCall_3_1_0() { return cInitExpressionsXVariableDeclarationParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//expression=XExpression?
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//updateExpressions+=XExpression?
		public Assignment getUpdateExpressionsAssignment_6() { return cUpdateExpressionsAssignment_6; }

		//XExpression
		public RuleCall getUpdateExpressionsXExpressionParserRuleCall_6_0() { return cUpdateExpressionsXExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//eachExpression=XBlockExpression
		public Assignment getEachExpressionAssignment_8() { return cEachExpressionAssignment_8; }

		//XBlockExpression
		public RuleCall getEachExpressionXBlockExpressionParserRuleCall_8_0() { return cEachExpressionXBlockExpressionParserRuleCall_8_0; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXVariableDeclarationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0_1_0 = (RuleCall)cTypeAssignment_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_0_0_2_0 = (RuleCall)cNameAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		private final Assignment cWriteableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cWriteableSemicolonKeyword_2_0 = (Keyword)cWriteableAssignment_2.eContents().get(0);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>removed 'var' and 'val' keywords</li>
		// *     <li>type is mandatory</li>
		// *     <li>XExpression as initializiation</li>
		// * </ul>
		// * / XVariableDeclaration returns xbase::XExpression:
		//	=> ({xbase::XVariableDeclaration} type=JvmTypeReference name=ValidID) ("=" right=XExpression)? writeable?=";";
		@Override public ParserRule getRule() { return rule; }

		//=> ({xbase::XVariableDeclaration} type=JvmTypeReference name=ValidID) ("=" right=XExpression)? writeable?=";"
		public Group getGroup() { return cGroup; }

		//=> ({xbase::XVariableDeclaration} type=JvmTypeReference name=ValidID)
		public Group getGroup_0() { return cGroup_0; }

		//{xbase::XVariableDeclaration} type=JvmTypeReference name=ValidID
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{xbase::XVariableDeclaration}
		public Action getXVariableDeclarationAction_0_0_0() { return cXVariableDeclarationAction_0_0_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0_0_1() { return cTypeAssignment_0_0_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0_1_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_0_2() { return cNameAssignment_0_0_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0_2_0() { return cNameValidIDParserRuleCall_0_0_2_0; }

		//("=" right=XExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//right=XExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_1_1_0() { return cRightXExpressionParserRuleCall_1_1_0; }

		//writeable?=";"
		public Assignment getWriteableAssignment_2() { return cWriteableAssignment_2; }

		//";"
		public Keyword getWriteableSemicolonKeyword_2_0() { return cWriteableSemicolonKeyword_2_0; }
	}

	public class XOtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOtherOperatorExpression");
		private final RuleCall cXAdditiveExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>only delegates to XAdditiveExpression</li>
		// * </ul>
		// * / XOtherOperatorExpression returns xbase::XExpression:
		//	XAdditiveExpression;
		@Override public ParserRule getRule() { return rule; }

		//XAdditiveExpression
		public RuleCall getXAdditiveExpressionParserRuleCall() { return cXAdditiveExpressionParserRuleCall; }
	}

	public class XReturnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XReturnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXReturnExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>XExpression -> XExpression</li>
		// * </ul>
		// * / XReturnExpression returns xbase::XExpression:
		//	{xbase::XReturnExpression} "return" -> expression=XExpression?;
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XReturnExpression} "return" -> expression=XExpression?
		public Group getGroup() { return cGroup; }

		//{xbase::XReturnExpression}
		public Action getXReturnExpressionAction_0() { return cXReturnExpressionAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//-> expression=XExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}

	public class XMemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_0_1 = (Alternatives)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_0_0_1_0 = (Keyword)cAlternatives_1_0_0_0_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_0_0_0_1_1 = (Assignment)cAlternatives_1_0_0_0_1.eContents().get(1);
		private final Keyword cExplicitStaticColonColonKeyword_1_0_0_0_1_1_0 = (Keyword)cExplicitStaticAssignment_1_0_0_0_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0 = (CrossReference)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0_0_1_0 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_1_0_0_1_1 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Keyword cExplicitStaticColonColonKeyword_1_1_0_0_1_1_0 = (Keyword)cExplicitStaticAssignment_1_1_0_0_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_1_1_0 = (CrossReference)cFeatureAssignment_1_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_1_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0 = (Keyword)cExplicitOperationCallAssignment_1_1_2_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_2_1 = (Alternatives)cGroup_1_1_2.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_2_1_0 = (Assignment)cAlternatives_1_1_2_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXShortClosureParserRuleCall_1_1_2_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_2_1_0.eContents().get(0);
		private final Group cGroup_1_1_2_1_1 = (Group)cAlternatives_1_1_2_1.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_2_1_1_0 = (Assignment)cGroup_1_1_2_1_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_1_2_1_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_2_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_2_1_1_1 = (Group)cGroup_1_1_2_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_2_1_1_1_0 = (Keyword)cGroup_1_1_2_1_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_1_2_1_1_1_1 = (Assignment)cGroup_1_1_2_1_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_1_2_1_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cRAlfAssocNavExpressionLeftAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cRightTUAssociationEndCrossReference_1_2_1_0 = (CrossReference)cRightAssignment_1_2_1.eContents().get(0);
		private final RuleCall cRightTUAssociationEndTUAssocEndNameParserRuleCall_1_2_1_0_1 = (RuleCall)cRightTUAssociationEndCrossReference_1_2_1_0.eContents().get(1);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>no nullsafe feature call keyword</li>
		// *     <li>no type arguments for features</li>
		// *     <li>no closure after parenthesis</li>
		// *     <li>XExpression -> XExpression in call arguments</li>
		// * </ul>
		// * / XMemberFeatureCall returns xbase::XExpression:
		//	XPrimaryExpression (=> ({xbase::XAssignment.assignable=current} ("." | explicitStatic?="::")
		//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
		//	({xbase::XMemberFeatureCall.memberCallTarget=current} ("." | explicitStatic?="::"))
		//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
		//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? | =>
		//	({RAlfAssocNavExpression.left=current} "->") right=[TUAssociationEnd|TUAssocEndName])*;
		@Override public ParserRule getRule() { return rule; }

		//XPrimaryExpression (=> ({xbase::XAssignment.assignable=current} ("." | explicitStatic?="::")
		//feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
		//({xbase::XMemberFeatureCall.memberCallTarget=current} ("." | explicitStatic?="::"))
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
		//memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? | =>
		//({RAlfAssocNavExpression.left=current} "->") right=[TUAssociationEnd|TUAssocEndName])*
		public Group getGroup() { return cGroup; }

		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }

		//(=> ({xbase::XAssignment.assignable=current} ("." | explicitStatic?="::")
		//feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
		//({xbase::XMemberFeatureCall.memberCallTarget=current} ("." | explicitStatic?="::"))
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
		//memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? | =>
		//({RAlfAssocNavExpression.left=current} "->") right=[TUAssociationEnd|TUAssocEndName])*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({xbase::XAssignment.assignable=current} ("." | explicitStatic?="::")
		//feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({xbase::XAssignment.assignable=current} ("." | explicitStatic?="::")
		//feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{xbase::XAssignment.assignable=current} ("." | explicitStatic?="::")
		//feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{xbase::XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_0_0_0_0() { return cXAssignmentAssignableAction_1_0_0_0_0; }

		//"." | explicitStatic?="::"
		public Alternatives getAlternatives_1_0_0_0_1() { return cAlternatives_1_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0_1_0() { return cFullStopKeyword_1_0_0_0_1_0; }

		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_0_0_0_1_1() { return cExplicitStaticAssignment_1_0_0_0_1_1; }

		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0() { return cExplicitStaticColonColonKeyword_1_0_0_0_1_1_0; }

		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }

		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0; }

		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }

		//value=XAssignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_0_1_0() { return cValueXAssignmentParserRuleCall_1_0_1_0; }

		//=> ({xbase::XMemberFeatureCall.memberCallTarget=current} ("." | explicitStatic?="::"))
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
		//memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({xbase::XMemberFeatureCall.memberCallTarget=current} ("." | explicitStatic?="::"))
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{xbase::XMemberFeatureCall.memberCallTarget=current} ("." | explicitStatic?="::")
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{xbase::XMemberFeatureCall.memberCallTarget=current}
		public Action getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() { return cXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0; }

		//"." | explicitStatic?="::"
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_0_1_0() { return cFullStopKeyword_1_1_0_0_1_0; }

		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_1_0_0_1_1() { return cExplicitStaticAssignment_1_1_0_0_1_1; }

		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_1_0_0_1_1_0() { return cExplicitStaticColonColonKeyword_1_1_0_0_1_1_0; }

		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_1_1_1() { return cFeatureAssignment_1_1_1; }

		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_1_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_1_1_0; }

		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_1_1_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_1_1_0_1; }

		//(=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure | memberCallArguments+=XExpression (","
		//memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_1_2_0() { return cExplicitOperationCallAssignment_1_1_2_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0; }

		//(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
		public Alternatives getAlternatives_1_1_2_1() { return cAlternatives_1_1_2_1; }

		//memberCallArguments+=XShortClosure
		public Assignment getMemberCallArgumentsAssignment_1_1_2_1_0() { return cMemberCallArgumentsAssignment_1_1_2_1_0; }

		//XShortClosure
		public RuleCall getMemberCallArgumentsXShortClosureParserRuleCall_1_1_2_1_0_0() { return cMemberCallArgumentsXShortClosureParserRuleCall_1_1_2_1_0_0; }

		//memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*
		public Group getGroup_1_1_2_1_1() { return cGroup_1_1_2_1_1; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_2_1_1_0() { return cMemberCallArgumentsAssignment_1_1_2_1_1_0; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_1_2_1_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_1_2_1_1_0_0; }

		//("," memberCallArguments+=XExpression)*
		public Group getGroup_1_1_2_1_1_1() { return cGroup_1_1_2_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_2_1_1_1_0() { return cCommaKeyword_1_1_2_1_1_1_0; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_2_1_1_1_1() { return cMemberCallArgumentsAssignment_1_1_2_1_1_1_1; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_1_2_1_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_1_2_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2_2() { return cRightParenthesisKeyword_1_1_2_2; }

		//=> ({RAlfAssocNavExpression.left=current} "->") right=[TUAssociationEnd|TUAssocEndName]
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({RAlfAssocNavExpression.left=current} "->")
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//{RAlfAssocNavExpression.left=current} "->"
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{RAlfAssocNavExpression.left=current}
		public Action getRAlfAssocNavExpressionLeftAction_1_2_0_0_0() { return cRAlfAssocNavExpressionLeftAction_1_2_0_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2_0_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_2_0_0_1; }

		//right=[TUAssociationEnd|TUAssocEndName]
		public Assignment getRightAssignment_1_2_1() { return cRightAssignment_1_2_1; }

		//[TUAssociationEnd|TUAssocEndName]
		public CrossReference getRightTUAssociationEndCrossReference_1_2_1_0() { return cRightTUAssociationEndCrossReference_1_2_1_0; }

		//TUAssocEndName
		public RuleCall getRightTUAssociationEndTUAssocEndNameParserRuleCall_1_2_1_0_1() { return cRightTUAssociationEndTUAssocEndNameParserRuleCall_1_2_1_0_1; }
	}

	public class TUAssocEndNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TUAssocEndName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TUAssocEndName:
		//	ValidID ("::" ValidID)*;
		@Override public ParserRule getRule() { return rule; }

		//ValidID ("::" ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//(=> "::" ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class JvmSimpleTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmSimpleTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmParameterizedTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_0.eContents().get(1);
		
		//// New Xtype rules
		//JvmSimpleTypeReference returns types::JvmParameterizedTypeReference:
		//	{types::JvmParameterizedTypeReference} type=[types::JvmType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//{types::JvmParameterizedTypeReference} type=[types::JvmType|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{types::JvmParameterizedTypeReference}
		public Action getJvmParameterizedTypeReferenceAction_0() { return cJvmParameterizedTypeReferenceAction_0; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_1_0() { return cTypeJvmTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }
	}

	public class JvmTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJvmParameterizedTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJvmSimpleTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Overridden Xtype rules
		/// *
		// * Changes:
		// * <ul>
		// *     <li>
		// *         Removed:
		// *         <ul>
		// *             <li>JvmGenericArrayTypeReference</li>
		// * 	           <li>XFunctionTypeRef</li>
		// *         </ul>
		// *     </li>
		// *     <li>
		// *         Added:
		// *         <ul>
		// *             <li>JvmSimpleTypeReference</li>
		// *         </ul>
		// *     </li>
		// * </ul> 
		// * / JvmTypeReference returns types::JvmTypeReference:
		//	JvmParameterizedTypeReference | JvmSimpleTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//JvmParameterizedTypeReference | JvmSimpleTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//JvmParameterizedTypeReference
		public RuleCall getJvmParameterizedTypeReferenceParserRuleCall_0() { return cJvmParameterizedTypeReferenceParserRuleCall_0; }

		//JvmSimpleTypeReference
		public RuleCall getJvmSimpleTypeReferenceParserRuleCall_1() { return cJvmSimpleTypeReferenceParserRuleCall_1; }
	}

	public class JvmParameterizedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmParameterizedTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0_0_0 = (CrossReference)cTypeAssignment_0_0_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_0_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsJvmSimpleTypeReferenceParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>exactly one "simple" type argument</li>
		// * </ul>
		// * / JvmParameterizedTypeReference returns types::JvmParameterizedTypeReference:
		//	=> (type=[types::JvmType|QualifiedName] "<") arguments+=JvmSimpleTypeReference ">";
		@Override public ParserRule getRule() { return rule; }

		//=> (type=[types::JvmType|QualifiedName] "<") arguments+=JvmSimpleTypeReference ">"
		public Group getGroup() { return cGroup; }

		//=> (type=[types::JvmType|QualifiedName] "<")
		public Group getGroup_0() { return cGroup_0; }

		//type=[types::JvmType|QualifiedName] "<"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_0_0_0() { return cTypeAssignment_0_0_0; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_0_0_0() { return cTypeJvmTypeCrossReference_0_0_0_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_0_0_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_0_0_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_0_0_1() { return cLessThanSignKeyword_0_0_1; }

		//arguments+=JvmSimpleTypeReference
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//JvmSimpleTypeReference
		public RuleCall getArgumentsJvmSimpleTypeReferenceParserRuleCall_1_0() { return cArgumentsJvmSimpleTypeReferenceParserRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class XImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStaticAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0_0 = (Keyword)cStaticAssignment_1_0_0.eContents().get(0);
		private final Assignment cImportedTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cImportedTypeJvmDeclaredTypeCrossReference_1_0_1_0 = (CrossReference)cImportedTypeAssignment_1_0_1.eContents().get(0);
		private final RuleCall cImportedTypeJvmDeclaredTypeQualifiedNameInStaticImportParserRuleCall_1_0_1_0_1 = (RuleCall)cImportedTypeJvmDeclaredTypeCrossReference_1_0_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Assignment cWildcardAssignment_1_0_2_0 = (Assignment)cAlternatives_1_0_2.eContents().get(0);
		private final Keyword cWildcardAsteriskKeyword_1_0_2_0_0 = (Keyword)cWildcardAssignment_1_0_2_0.eContents().get(0);
		private final Assignment cMemberNameAssignment_1_0_2_1 = (Assignment)cAlternatives_1_0_2.eContents().get(1);
		private final RuleCall cMemberNameValidIDParserRuleCall_1_0_2_1_0 = (RuleCall)cMemberNameAssignment_1_0_2_1.eContents().get(0);
		private final Assignment cImportedTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cImportedTypeJvmDeclaredTypeCrossReference_1_1_0 = (CrossReference)cImportedTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cImportedTypeJvmDeclaredTypeCrossReference_1_1_0.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0 = (RuleCall)cImportedNamespaceAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		// * Changes:
		// * <ul>
		// *     <li>removed extension imports</li>
		// * </ul>
		// * / XImportDeclaration returns xtype::XImportDeclaration:
		//	"import" (static?="static" importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?="*" |
		//	memberName=ValidID) | importedType=[types::JvmDeclaredType|QualifiedName] |
		//	importedNamespace=QualifiedNameWithWildcard) ";"?;
		@Override public ParserRule getRule() { return rule; }

		//"import" (static?="static" importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?="*" |
		//memberName=ValidID) | importedType=[types::JvmDeclaredType|QualifiedName] |
		//importedNamespace=QualifiedNameWithWildcard) ";"?
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//static?="static" importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?="*" | memberName=ValidID)
		//| importedType=[types::JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//static?="static" importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?="*" | memberName=ValidID)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//static?="static"
		public Assignment getStaticAssignment_1_0_0() { return cStaticAssignment_1_0_0; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0_0_0() { return cStaticStaticKeyword_1_0_0_0; }

		//importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport]
		public Assignment getImportedTypeAssignment_1_0_1() { return cImportedTypeAssignment_1_0_1; }

		//[types::JvmDeclaredType|QualifiedNameInStaticImport]
		public CrossReference getImportedTypeJvmDeclaredTypeCrossReference_1_0_1_0() { return cImportedTypeJvmDeclaredTypeCrossReference_1_0_1_0; }

		//QualifiedNameInStaticImport
		public RuleCall getImportedTypeJvmDeclaredTypeQualifiedNameInStaticImportParserRuleCall_1_0_1_0_1() { return cImportedTypeJvmDeclaredTypeQualifiedNameInStaticImportParserRuleCall_1_0_1_0_1; }

		//wildcard?="*" | memberName=ValidID
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }

		//wildcard?="*"
		public Assignment getWildcardAssignment_1_0_2_0() { return cWildcardAssignment_1_0_2_0; }

		//"*"
		public Keyword getWildcardAsteriskKeyword_1_0_2_0_0() { return cWildcardAsteriskKeyword_1_0_2_0_0; }

		//memberName=ValidID
		public Assignment getMemberNameAssignment_1_0_2_1() { return cMemberNameAssignment_1_0_2_1; }

		//ValidID
		public RuleCall getMemberNameValidIDParserRuleCall_1_0_2_1_0() { return cMemberNameValidIDParserRuleCall_1_0_2_1_0; }

		//importedType=[types::JvmDeclaredType|QualifiedName]
		public Assignment getImportedTypeAssignment_1_1() { return cImportedTypeAssignment_1_1; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getImportedTypeJvmDeclaredTypeCrossReference_1_1_0() { return cImportedTypeJvmDeclaredTypeCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_1_0_1() { return cImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_1_0_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1_2() { return cImportedNamespaceAssignment_1_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	public class TUStateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TUStateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLAINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLAINStateKeyword_0_0 = (Keyword)cPLAINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINITIALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINITIALInitialKeyword_1_0 = (Keyword)cINITIALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCHOICEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCHOICEChoiceKeyword_2_0 = (Keyword)cCHOICEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMPOSITECompositeKeyword_3_0 = (Keyword)cCOMPOSITEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TUStateType:
		//	PLAIN="state" | INITIAL="initial" | CHOICE="choice" | COMPOSITE="composite";
		public EnumRule getRule() { return rule; }

		//PLAIN="state" | INITIAL="initial" | CHOICE="choice" | COMPOSITE="composite"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLAIN="state"
		public EnumLiteralDeclaration getPLAINEnumLiteralDeclaration_0() { return cPLAINEnumLiteralDeclaration_0; }

		//"state"
		public Keyword getPLAINStateKeyword_0_0() { return cPLAINStateKeyword_0_0; }

		//INITIAL="initial"
		public EnumLiteralDeclaration getINITIALEnumLiteralDeclaration_1() { return cINITIALEnumLiteralDeclaration_1; }

		//"initial"
		public Keyword getINITIALInitialKeyword_1_0() { return cINITIALInitialKeyword_1_0; }

		//CHOICE="choice"
		public EnumLiteralDeclaration getCHOICEEnumLiteralDeclaration_2() { return cCHOICEEnumLiteralDeclaration_2; }

		//"choice"
		public Keyword getCHOICEChoiceKeyword_2_0() { return cCHOICEChoiceKeyword_2_0; }

		//COMPOSITE="composite"
		public EnumLiteralDeclaration getCOMPOSITEEnumLiteralDeclaration_3() { return cCOMPOSITEEnumLiteralDeclaration_3; }

		//"composite"
		public Keyword getCOMPOSITECompositeKeyword_3_0() { return cCOMPOSITECompositeKeyword_3_0; }
	}

	public class TUVisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TUVisibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPACKAGEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPACKAGEPackageKeyword_0_0 = (Keyword)cPACKAGEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDProtectedKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPUBLICPublicKeyword_3_0 = (Keyword)cPUBLICEnumLiteralDeclaration_3.eContents().get(0);
		
		//// Commons
		//enum TUVisibility:
		//	PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public";
		public EnumRule getRule() { return rule; }

		//PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PACKAGE="package"
		public EnumLiteralDeclaration getPACKAGEEnumLiteralDeclaration_0() { return cPACKAGEEnumLiteralDeclaration_0; }

		//"package"
		public Keyword getPACKAGEPackageKeyword_0_0() { return cPACKAGEPackageKeyword_0_0; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }

		//PROTECTED="protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }

		//"protected"
		public Keyword getPROTECTEDProtectedKeyword_2_0() { return cPROTECTEDProtectedKeyword_2_0; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_3() { return cPUBLICEnumLiteralDeclaration_3; }

		//"public"
		public Keyword getPUBLICPublicKeyword_3_0() { return cPUBLICPublicKeyword_3_0; }
	}
	
	private final TUFileElements pTUFile;
	private final TUModelDeclarationElements pTUModelDeclaration;
	private final TUModelElementElements pTUModelElement;
	private final TUExecutionElements pTUExecution;
	private final TUSignalElements pTUSignal;
	private final TUClassElements pTUClass;
	private final TUAssociationElements pTUAssociation;
	private final TUSignalAttributeElements pTUSignalAttribute;
	private final TUClassMemberElements pTUClassMember;
	private final TUConstructorElements pTUConstructor;
	private final TUAttributeOrOperationDeclarationPrefixElements pTUAttributeOrOperationDeclarationPrefix;
	private final TUStateElements pTUState;
	private final TUStateTypeElements unknownRuleTUStateType;
	private final TUStateMemberElements pTUStateMember;
	private final TUEntryOrExitActivityElements pTUEntryOrExitActivity;
	private final TUTransitionElements pTUTransition;
	private final TUTransitionMemberElements pTUTransitionMember;
	private final TUTransitionTriggerElements pTUTransitionTrigger;
	private final TUTransitionVertexElements pTUTransitionVertex;
	private final TUTransitionEffectElements pTUTransitionEffect;
	private final TUTransitionGuardElements pTUTransitionGuard;
	private final TUAssociationEndElements pTUAssociationEnd;
	private final TUMultiplicityElements pTUMultiplicity;
	private final TUVisibilityElements unknownRuleTUVisibility;
	private final RAlfSendSignalExpressionElements pRAlfSendSignalExpression;
	private final RAlfDeleteObjectExpressionElements pRAlfDeleteObjectExpression;
	private final RAlfSignalAccessExpressionElements pRAlfSignalAccessExpression;
	private final XRAlfStatementElements pXRAlfStatement;
	private final XRAlfStatementSemicolonNotNeededElements pXRAlfStatementSemicolonNotNeeded;
	private final XRAlfStatementSemicolonNeededElements pXRAlfStatementSemicolonNeeded;
	private final XParenthesizedRAlfExpressionElements pXParenthesizedRAlfExpression;
	private final XLiteralElements pXLiteral;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final XConstructorCallElements pXConstructorCall;
	private final XBlockExpressionElements pXBlockExpression;
	private final XWhileExpressionElements pXWhileExpression;
	private final XDoWhileExpressionElements pXDoWhileExpression;
	private final XFeatureCallElements pXFeatureCall;
	private final XIfExpressionElements pXIfExpression;
	private final XForLoopExpressionElements pXForLoopExpression;
	private final XSwitchExpressionElements pXSwitchExpression;
	private final XCasePartElements pXCasePart;
	private final XBasicForLoopExpressionElements pXBasicForLoopExpression;
	private final XVariableDeclarationElements pXVariableDeclaration;
	private final XOtherOperatorExpressionElements pXOtherOperatorExpression;
	private final XReturnExpressionElements pXReturnExpression;
	private final XMemberFeatureCallElements pXMemberFeatureCall;
	private final TUAssocEndNameElements pTUAssocEndName;
	private final JvmSimpleTypeReferenceElements pJvmSimpleTypeReference;
	private final JvmTypeReferenceElements pJvmTypeReference;
	private final JvmParameterizedTypeReferenceElements pJvmParameterizedTypeReference;
	private final XImportDeclarationElements pXImportDeclaration;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public XtxtUMLGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pTUFile = new TUFileElements();
		this.pTUModelDeclaration = new TUModelDeclarationElements();
		this.pTUModelElement = new TUModelElementElements();
		this.pTUExecution = new TUExecutionElements();
		this.pTUSignal = new TUSignalElements();
		this.pTUClass = new TUClassElements();
		this.pTUAssociation = new TUAssociationElements();
		this.pTUSignalAttribute = new TUSignalAttributeElements();
		this.pTUClassMember = new TUClassMemberElements();
		this.pTUConstructor = new TUConstructorElements();
		this.pTUAttributeOrOperationDeclarationPrefix = new TUAttributeOrOperationDeclarationPrefixElements();
		this.pTUState = new TUStateElements();
		this.unknownRuleTUStateType = new TUStateTypeElements();
		this.pTUStateMember = new TUStateMemberElements();
		this.pTUEntryOrExitActivity = new TUEntryOrExitActivityElements();
		this.pTUTransition = new TUTransitionElements();
		this.pTUTransitionMember = new TUTransitionMemberElements();
		this.pTUTransitionTrigger = new TUTransitionTriggerElements();
		this.pTUTransitionVertex = new TUTransitionVertexElements();
		this.pTUTransitionEffect = new TUTransitionEffectElements();
		this.pTUTransitionGuard = new TUTransitionGuardElements();
		this.pTUAssociationEnd = new TUAssociationEndElements();
		this.pTUMultiplicity = new TUMultiplicityElements();
		this.unknownRuleTUVisibility = new TUVisibilityElements();
		this.pRAlfSendSignalExpression = new RAlfSendSignalExpressionElements();
		this.pRAlfDeleteObjectExpression = new RAlfDeleteObjectExpressionElements();
		this.pRAlfSignalAccessExpression = new RAlfSignalAccessExpressionElements();
		this.pXRAlfStatement = new XRAlfStatementElements();
		this.pXRAlfStatementSemicolonNotNeeded = new XRAlfStatementSemicolonNotNeededElements();
		this.pXRAlfStatementSemicolonNeeded = new XRAlfStatementSemicolonNeededElements();
		this.pXParenthesizedRAlfExpression = new XParenthesizedRAlfExpressionElements();
		this.pXLiteral = new XLiteralElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pXConstructorCall = new XConstructorCallElements();
		this.pXBlockExpression = new XBlockExpressionElements();
		this.pXWhileExpression = new XWhileExpressionElements();
		this.pXDoWhileExpression = new XDoWhileExpressionElements();
		this.pXFeatureCall = new XFeatureCallElements();
		this.pXIfExpression = new XIfExpressionElements();
		this.pXForLoopExpression = new XForLoopExpressionElements();
		this.pXSwitchExpression = new XSwitchExpressionElements();
		this.pXCasePart = new XCasePartElements();
		this.pXBasicForLoopExpression = new XBasicForLoopExpressionElements();
		this.pXVariableDeclaration = new XVariableDeclarationElements();
		this.pXOtherOperatorExpression = new XOtherOperatorExpressionElements();
		this.pXReturnExpression = new XReturnExpressionElements();
		this.pXMemberFeatureCall = new XMemberFeatureCallElements();
		this.pTUAssocEndName = new TUAssocEndNameElements();
		this.pJvmSimpleTypeReference = new JvmSimpleTypeReferenceElements();
		this.pJvmTypeReference = new JvmTypeReferenceElements();
		this.pJvmParameterizedTypeReference = new JvmParameterizedTypeReferenceElements();
		this.pXImportDeclaration = new XImportDeclarationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.elte.txtuml.xtxtuml.XtxtUML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//// Start rule
	//TUFile:
	//	TUModelDeclaration | ("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=TUModelElement*;
	public TUFileElements getTUFileAccess() {
		return pTUFile;
	}
	
	public ParserRule getTUFileRule() {
		return getTUFileAccess().getRule();
	}

	//TUModelDeclaration:
	//	{TUModelDeclaration} "model" name=STRING? ";";
	public TUModelDeclarationElements getTUModelDeclarationAccess() {
		return pTUModelDeclaration;
	}
	
	public ParserRule getTUModelDeclarationRule() {
		return getTUModelDeclarationAccess().getRule();
	}

	//// Model level
	//TUModelElement:
	//	TUExecution | TUSignal | TUClass | TUAssociation;
	public TUModelElementElements getTUModelElementAccess() {
		return pTUModelElement;
	}
	
	public ParserRule getTUModelElementRule() {
		return getTUModelElementAccess().getRule();
	}

	//TUExecution:
	//	"execution" name=ValidID body=XBlockExpression;
	public TUExecutionElements getTUExecutionAccess() {
		return pTUExecution;
	}
	
	public ParserRule getTUExecutionRule() {
		return getTUExecutionAccess().getRule();
	}

	//TUSignal:
	//	"signal" name=ValidID ("{" attributes+=TUSignalAttribute* "}" ";"? | ";");
	public TUSignalElements getTUSignalAccess() {
		return pTUSignal;
	}
	
	public ParserRule getTUSignalRule() {
		return getTUSignalAccess().getRule();
	}

	//TUClass:
	//	"class" name=ValidID ("extends" superClass=[TUClass|QualifiedName])? ("{" members+=TUClassMember* "}" ";"? | ";");
	public TUClassElements getTUClassAccess() {
		return pTUClass;
	}
	
	public ParserRule getTUClassRule() {
		return getTUClassAccess().getRule();
	}

	//TUAssociation:
	//	"association" name=ValidID "{" ends+=TUAssociationEnd* "}";
	public TUAssociationElements getTUAssociationAccess() {
		return pTUAssociation;
	}
	
	public ParserRule getTUAssociationRule() {
		return getTUAssociationAccess().getRule();
	}

	//// Inner element level
	//// Signal- and Class-related
	/// *
	// * TODO replace with general TUAttribute
	// * / TUSignalAttribute:
	//	visibility=TUVisibility? type=JvmTypeReference name=ValidID ";";
	public TUSignalAttributeElements getTUSignalAttributeAccess() {
		return pTUSignalAttribute;
	}
	
	public ParserRule getTUSignalAttributeRule() {
		return getTUSignalAttributeAccess().getRule();
	}

	/// *
	// * TODO left-factoring is no longer necessary
	// * / TUClassMember:
	//	TUConstructor | TUAttributeOrOperationDeclarationPrefix ({TUAttribute.prefix=current} name=ValidID ";" |
	//	{TUOperation.prefix=current} name=ValidID "(" (parameters+=FullJvmFormalParameter (","
	//	parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression ";"?) | TUState | TUTransition;
	public TUClassMemberElements getTUClassMemberAccess() {
		return pTUClassMember;
	}
	
	public ParserRule getTUClassMemberRule() {
		return getTUClassMemberAccess().getRule();
	}

	//TUConstructor:
	//	visibility=TUVisibility? name=ValidID "(" (parameters+=FullJvmFormalParameter (","
	//	parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression ";"?;
	public TUConstructorElements getTUConstructorAccess() {
		return pTUConstructor;
	}
	
	public ParserRule getTUConstructorRule() {
		return getTUConstructorAccess().getRule();
	}

	//TUAttributeOrOperationDeclarationPrefix:
	//	visibility=TUVisibility? type=JvmTypeReference;
	public TUAttributeOrOperationDeclarationPrefixElements getTUAttributeOrOperationDeclarationPrefixAccess() {
		return pTUAttributeOrOperationDeclarationPrefix;
	}
	
	public ParserRule getTUAttributeOrOperationDeclarationPrefixRule() {
		return getTUAttributeOrOperationDeclarationPrefixAccess().getRule();
	}

	//TUState:
	//	type=TUStateType name=ValidID ("{" members+=TUStateMember* "}" ";"? | ";");
	public TUStateElements getTUStateAccess() {
		return pTUState;
	}
	
	public ParserRule getTUStateRule() {
		return getTUStateAccess().getRule();
	}

	//enum TUStateType:
	//	PLAIN="state" | INITIAL="initial" | CHOICE="choice" | COMPOSITE="composite";
	public TUStateTypeElements getTUStateTypeAccess() {
		return unknownRuleTUStateType;
	}
	
	public EnumRule getTUStateTypeRule() {
		return getTUStateTypeAccess().getRule();
	}

	//TUStateMember:
	//	TUState | TUEntryOrExitActivity | TUTransition;
	public TUStateMemberElements getTUStateMemberAccess() {
		return pTUStateMember;
	}
	
	public ParserRule getTUStateMemberRule() {
		return getTUStateMemberAccess().getRule();
	}

	//TUEntryOrExitActivity:
	//	(entry?="entry" | exit?="exit") body=XBlockExpression ";"?;
	public TUEntryOrExitActivityElements getTUEntryOrExitActivityAccess() {
		return pTUEntryOrExitActivity;
	}
	
	public ParserRule getTUEntryOrExitActivityRule() {
		return getTUEntryOrExitActivityAccess().getRule();
	}

	//TUTransition:
	//	"transition" name=ValidID "{" members+=TUTransitionMember* "}" ";"?;
	public TUTransitionElements getTUTransitionAccess() {
		return pTUTransition;
	}
	
	public ParserRule getTUTransitionRule() {
		return getTUTransitionAccess().getRule();
	}

	//TUTransitionMember:
	//	TUTransitionTrigger | TUTransitionVertex | TUTransitionEffect | TUTransitionGuard;
	public TUTransitionMemberElements getTUTransitionMemberAccess() {
		return pTUTransitionMember;
	}
	
	public ParserRule getTUTransitionMemberRule() {
		return getTUTransitionMemberAccess().getRule();
	}

	//TUTransitionTrigger:
	//	"trigger" trigger=[TUSignal|QualifiedName] ";";
	public TUTransitionTriggerElements getTUTransitionTriggerAccess() {
		return pTUTransitionTrigger;
	}
	
	public ParserRule getTUTransitionTriggerRule() {
		return getTUTransitionTriggerAccess().getRule();
	}

	//TUTransitionVertex:
	//	(from?="from" | "to") vertex=[TUState|QualifiedName] ";";
	public TUTransitionVertexElements getTUTransitionVertexAccess() {
		return pTUTransitionVertex;
	}
	
	public ParserRule getTUTransitionVertexRule() {
		return getTUTransitionVertexAccess().getRule();
	}

	//TUTransitionEffect:
	//	"effect" body=XBlockExpression ";"?;
	public TUTransitionEffectElements getTUTransitionEffectAccess() {
		return pTUTransitionEffect;
	}
	
	public ParserRule getTUTransitionEffectRule() {
		return getTUTransitionEffectAccess().getRule();
	}

	//TUTransitionGuard:
	//	"guard" "(" (else?="else" | expression=XExpression) ")" ";"?;
	public TUTransitionGuardElements getTUTransitionGuardAccess() {
		return pTUTransitionGuard;
	}
	
	public ParserRule getTUTransitionGuardRule() {
		return getTUTransitionGuardAccess().getRule();
	}

	//// Association-related
	//TUAssociationEnd:
	//	visibility=TUVisibility? notNavigable?="hidden"? multiplicity=TUMultiplicity endClass=[TUClass|QualifiedName]
	//	name=ValidID ";";
	public TUAssociationEndElements getTUAssociationEndAccess() {
		return pTUAssociationEnd;
	}
	
	public ParserRule getTUAssociationEndRule() {
		return getTUAssociationEndAccess().getRule();
	}

	//TUMultiplicity:
	//	lower=INT (upperSet?=".." (upper=INT | upperInf?="*"))? | any?="*";
	public TUMultiplicityElements getTUMultiplicityAccess() {
		return pTUMultiplicity;
	}
	
	public ParserRule getTUMultiplicityRule() {
		return getTUMultiplicityAccess().getRule();
	}

	//// Commons
	//enum TUVisibility:
	//	PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public";
	public TUVisibilityElements getTUVisibilityAccess() {
		return unknownRuleTUVisibility;
	}
	
	public EnumRule getTUVisibilityRule() {
		return getTUVisibilityAccess().getRule();
	}

	//// rAlf
	//RAlfSendSignalExpression returns xbase::XExpression:
	//	{RAlfSendSignalExpression} "send" signal=XExpression "to" target=XExpression;
	public RAlfSendSignalExpressionElements getRAlfSendSignalExpressionAccess() {
		return pRAlfSendSignalExpression;
	}
	
	public ParserRule getRAlfSendSignalExpressionRule() {
		return getRAlfSendSignalExpressionAccess().getRule();
	}

	//RAlfDeleteObjectExpression returns xbase::XExpression:
	//	{RAlfDeleteObjectExpression} "delete" object=XExpression;
	public RAlfDeleteObjectExpressionElements getRAlfDeleteObjectExpressionAccess() {
		return pRAlfDeleteObjectExpression;
	}
	
	public ParserRule getRAlfDeleteObjectExpressionRule() {
		return getRAlfDeleteObjectExpressionAccess().getRule();
	}

	//// the sole purpose of the sigdata feature
	//// is to provide a feature for validation
	//// to put a marker on
	//RAlfSignalAccessExpression returns xbase::XExpression:
	//	{RAlfSignalAccessExpression} sigdata="sigdata";
	public RAlfSignalAccessExpressionElements getRAlfSignalAccessExpressionAccess() {
		return pRAlfSignalAccessExpression;
	}
	
	public ParserRule getRAlfSignalAccessExpressionRule() {
		return getRAlfSignalAccessExpressionAccess().getRule();
	}

	//// Added rAlf-Xbase rules
	/// *
	// * only for readibility reasons
	// * / XRAlfStatement returns xbase::XExpression:
	//	XRAlfStatementSemicolonNeeded | XRAlfStatementSemicolonNotNeeded;
	public XRAlfStatementElements getXRAlfStatementAccess() {
		return pXRAlfStatement;
	}
	
	public ParserRule getXRAlfStatementRule() {
		return getXRAlfStatementAccess().getRule();
	}

	//XRAlfStatementSemicolonNotNeeded returns xbase::XExpression:
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XSwitchExpression |
	//	XBlockExpression | // semicolon included in rule
	//	XVariableDeclaration;
	public XRAlfStatementSemicolonNotNeededElements getXRAlfStatementSemicolonNotNeededAccess() {
		return pXRAlfStatementSemicolonNotNeeded;
	}
	
	public ParserRule getXRAlfStatementSemicolonNotNeededRule() {
		return getXRAlfStatementSemicolonNotNeededAccess().getRule();
	}

	//XRAlfStatementSemicolonNeeded returns xbase::XExpression:
	//	XReturnExpression | XDoWhileExpression | XExpression | RAlfSendSignalExpression | RAlfDeleteObjectExpression;
	public XRAlfStatementSemicolonNeededElements getXRAlfStatementSemicolonNeededAccess() {
		return pXRAlfStatementSemicolonNeeded;
	}
	
	public ParserRule getXRAlfStatementSemicolonNeededRule() {
		return getXRAlfStatementSemicolonNeededAccess().getRule();
	}

	//XParenthesizedRAlfExpression returns xbase::XExpression:
	//	"(" XExpression ")";
	public XParenthesizedRAlfExpressionElements getXParenthesizedRAlfExpressionAccess() {
		return pXParenthesizedRAlfExpression;
	}
	
	public ParserRule getXParenthesizedRAlfExpressionRule() {
		return getXParenthesizedRAlfExpressionAccess().getRule();
	}

	//// Overridden Xbase rules
	/// *
	// * Changes:
	// * <ul>
	// *     <li>
	// *         Removed:
	// *         <ul>
	// *             <li>XCollectionLiteral</li>
	// *             <li>XClosure</li>
	// *             <li>XTypeLiteral</li>
	// *         </ul>
	// *     </li>
	// * </ul>
	// * / XLiteral returns xbase::XExpression:
	//	XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral;
	public XLiteralElements getXLiteralAccess() {
		return pXLiteral;
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>
	// *         Removed: 
	// *         <ul>
	// *             <li>XBlockExpression</li>
	// *             <li>XSwitchExpression</li>
	// *             <li>XSynchronizedExpression</li>
	// *             <li>XIfExpression</li>
	// *             <li>XForLoopExpression</li>
	// *             <li>XBasicForLoopExpression</li>
	// *             <li>XWhileExpression</li>
	// *             <li>XDoWhileExpression</li>
	// *             <li>XThrowExpression</li>
	// *             <li>XReturnExpression</li>
	// *             <li>XTryCatchFinallyExpression</li>
	// *             <li>XParenthesizedExpression</li>
	// *         </ul>
	// *     </li>
	// *     <li>
	// *         Added:
	// *         <ul>
	// *             <li>XParenthesizedRAlfExpression</li>
	// *         </ul>
	// *     </li>
	// * </ul>
	// * / XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XFeatureCall | XLiteral | XParenthesizedRAlfExpression | RAlfSignalAccessExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>at most one "simple" type argument</li>
	// *     <li>parentheses are mandatory</li>
	// *     <li>no XShortClosure in arguments</li>
	// *     <li>no XClosure after the parameter list</li>
	// * </ul>
	// * / XConstructorCall returns xbase::XExpression:
	//	{xbase::XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmSimpleTypeReference ">")? => explicitConstructorCall?="(" (arguments+=XExpression (","
	//	arguments+=XExpression)*)? ")";
	public XConstructorCallElements getXConstructorCallAccess() {
		return pXConstructorCall;
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>restructured contained expressions</li>
	// * </ul>
	// * / XBlockExpression returns xbase::XExpression:
	//	{xbase::XBlockExpression} "{" (expressions+=XRAlfStatementSemicolonNotNeeded |
	//	expressions+=XRAlfStatementSemicolonNeeded ";")* "}";
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return pXBlockExpression;
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	/// * 
	// * Changes:
	// * <ul>
	// *     <li>predicate is an XExpression instead of XExpression</li>
	// *     <li>body is an XBlockExpression instead of XExpression</li>
	// * </ul>
	// * / XWhileExpression returns xbase::XExpression:
	//	{xbase::XWhileExpression} "while" "(" predicate=XExpression ")" body=XBlockExpression;
	public XWhileExpressionElements getXWhileExpressionAccess() {
		return pXWhileExpression;
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	/// * 
	// * Changes:
	// * <ul>
	// *     <li>predicate is an XExpression instead of XExpression</li>
	// *     <li>body is an XBlockExpression instead of XExpression</li>
	// * </ul>
	// * / XDoWhileExpression returns xbase::XExpression:
	//	{xbase::XDoWhileExpression} "do" body=XBlockExpression "while" "(" predicate=XExpression ")";
	public XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return pXDoWhileExpression;
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>no closures after parentheses</li>
	// *     <li>no type parameters</li>
	// *     <li>XExpression -> XExpression</li>
	// * </ul>
	// * / XFeatureCall returns xbase::XExpression:
	//	{xbase::XFeatureCall} feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="("
	//	(featureCallArguments+=XShortClosure | featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
	//	")")?;
	public XFeatureCallElements getXFeatureCallAccess() {
		return pXFeatureCall;
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>XBlockExpression is mandatory, except for an "else if" construct</li>
	// *     <li>XExpression -> XExpression</li>
	// * </ul>
	// * 
	// * / XIfExpression returns xbase::XExpression:
	//	{xbase::XIfExpression} "if" "(" if=XExpression ")" then=XBlockExpression ("else" else=(XIfExpression |
	//	XBlockExpression))?;
	public XIfExpressionElements getXIfExpressionAccess() {
		return pXIfExpression;
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>'in' instead of ':'</li>
	// *     <li>JvmFormalParameter -> FullJvmFormalParameter (type is mandatory)</li>
	// *     <li>XBlockExpression is mandatory</li>
	// *     <li>XExpression -> XExpression</li>
	// * </ul>
	// * / XForLoopExpression returns xbase::XExpression:
	//	=> ({xbase::XForLoopExpression} "for" "(" declaredParam=FullJvmFormalParameter "in") forExpression=XExpression ")"
	//	eachExpression=XBlockExpression;
	public XForLoopExpressionElements getXForLoopExpressionAccess() {
		return pXForLoopExpression;
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>no variable declaration allowed</li>
	// *     <li>parentheses are mandatory</li>
	// *     <li>XExpression -> XExpression</li>
	// *     <li>default has to be a block</li>
	// * </ul>
	// * / XSwitchExpression returns xbase::XExpression:
	//	{xbase::XSwitchExpression} "switch" "(" switch=XExpression ")" "{" cases+=XCasePart* ("default" ":"
	//	default=XBlockExpression)? "}";
	public XSwitchExpressionElements getXSwitchExpressionAccess() {
		return pXSwitchExpression;
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>removed type guards (thus 'case' is mandatory)</li>
	// *     <li>XExpression -> XExpression</li>
	// *     <li>then attribute can only be a block</li>
	// * </ul>
	// * / XCasePart returns xbase::XCasePart:
	//	{xbase::XCasePart} "case" case=XExpression (":" then=XBlockExpression | fallThrough?=",");
	public XCasePartElements getXCasePartAccess() {
		return pXCasePart;
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>only one init and update expression is allowed</li>
	// *     <li>changed Xbase expressions to corresponding RAlf-Xbase expressions</li>
	// *     <li>XBlockExpression is mandatory</li>
	// * </ul>
	// * / XBasicForLoopExpression returns xbase::XBasicForLoopExpression:
	//	{xbase::XBasicForLoopExpression} "for" "(" (initExpressions+=XExpression ";" | initExpressions+=XVariableDeclaration
	//	| ";") expression=XExpression? ";" updateExpressions+=XExpression? ")" eachExpression=XBlockExpression;
	public XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return pXBasicForLoopExpression;
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>removed 'var' and 'val' keywords</li>
	// *     <li>type is mandatory</li>
	// *     <li>XExpression as initializiation</li>
	// * </ul>
	// * / XVariableDeclaration returns xbase::XExpression:
	//	=> ({xbase::XVariableDeclaration} type=JvmTypeReference name=ValidID) ("=" right=XExpression)? writeable?=";";
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return pXVariableDeclaration;
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>only delegates to XAdditiveExpression</li>
	// * </ul>
	// * / XOtherOperatorExpression returns xbase::XExpression:
	//	XAdditiveExpression;
	public XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return pXOtherOperatorExpression;
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>XExpression -> XExpression</li>
	// * </ul>
	// * / XReturnExpression returns xbase::XExpression:
	//	{xbase::XReturnExpression} "return" -> expression=XExpression?;
	public XReturnExpressionElements getXReturnExpressionAccess() {
		return pXReturnExpression;
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>no nullsafe feature call keyword</li>
	// *     <li>no type arguments for features</li>
	// *     <li>no closure after parenthesis</li>
	// *     <li>XExpression -> XExpression in call arguments</li>
	// * </ul>
	// * / XMemberFeatureCall returns xbase::XExpression:
	//	XPrimaryExpression (=> ({xbase::XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({xbase::XMemberFeatureCall.memberCallTarget=current} ("." | explicitStatic?="::"))
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? | =>
	//	({RAlfAssocNavExpression.left=current} "->") right=[TUAssociationEnd|TUAssocEndName])*;
	public XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return pXMemberFeatureCall;
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//TUAssocEndName:
	//	ValidID ("::" ValidID)*;
	public TUAssocEndNameElements getTUAssocEndNameAccess() {
		return pTUAssocEndName;
	}
	
	public ParserRule getTUAssocEndNameRule() {
		return getTUAssocEndNameAccess().getRule();
	}

	//// New Xtype rules
	//JvmSimpleTypeReference returns types::JvmParameterizedTypeReference:
	//	{types::JvmParameterizedTypeReference} type=[types::JvmType|QualifiedName];
	public JvmSimpleTypeReferenceElements getJvmSimpleTypeReferenceAccess() {
		return pJvmSimpleTypeReference;
	}
	
	public ParserRule getJvmSimpleTypeReferenceRule() {
		return getJvmSimpleTypeReferenceAccess().getRule();
	}

	//// Overridden Xtype rules
	/// *
	// * Changes:
	// * <ul>
	// *     <li>
	// *         Removed:
	// *         <ul>
	// *             <li>JvmGenericArrayTypeReference</li>
	// * 	           <li>XFunctionTypeRef</li>
	// *         </ul>
	// *     </li>
	// *     <li>
	// *         Added:
	// *         <ul>
	// *             <li>JvmSimpleTypeReference</li>
	// *         </ul>
	// *     </li>
	// * </ul> 
	// * / JvmTypeReference returns types::JvmTypeReference:
	//	JvmParameterizedTypeReference | JvmSimpleTypeReference;
	public JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return pJvmTypeReference;
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>exactly one "simple" type argument</li>
	// * </ul>
	// * / JvmParameterizedTypeReference returns types::JvmParameterizedTypeReference:
	//	=> (type=[types::JvmType|QualifiedName] "<") arguments+=JvmSimpleTypeReference ">";
	public JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return pJvmParameterizedTypeReference;
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	/// *
	// * Changes:
	// * <ul>
	// *     <li>removed extension imports</li>
	// * </ul>
	// * / XImportDeclaration returns xtype::XImportDeclaration:
	//	"import" (static?="static" importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?="*" |
	//	memberName=ValidID) | importedType=[types::JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XImportDeclarationElements getXImportDeclarationAccess() {
		return pXImportDeclaration;
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
