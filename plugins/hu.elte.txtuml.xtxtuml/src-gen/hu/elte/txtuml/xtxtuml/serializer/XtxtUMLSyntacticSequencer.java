/*
 * generated by Xtext
 */
package hu.elte.txtuml.xtxtuml.serializer;

import com.google.inject.Inject;
import hu.elte.txtuml.xtxtuml.services.XtxtUMLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class XtxtUMLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected XtxtUMLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_TUClassMember_SemicolonKeyword_1_1_1_6_q;
	protected AbstractElementAlias match_TUClass_SemicolonKeyword_3_0_3_q;
	protected AbstractElementAlias match_TUClass_SemicolonKeyword_3_1_or___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_2_SemicolonKeyword_3_0_3_q__;
	protected AbstractElementAlias match_TUConstructor_SemicolonKeyword_6_q;
	protected AbstractElementAlias match_TUEntryOrExitActivity_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_TUFile_SemicolonKeyword_1_0_2_q;
	protected AbstractElementAlias match_TUSignal_SemicolonKeyword_2_0_3_q;
	protected AbstractElementAlias match_TUSignal_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__;
	protected AbstractElementAlias match_TUState_SemicolonKeyword_2_0_3_q;
	protected AbstractElementAlias match_TUState_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__;
	protected AbstractElementAlias match_TUTransitionEffect_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_TUTransitionGuard_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_TUTransition_SemicolonKeyword_5_q;
	protected AbstractElementAlias match_XExpressionInClosure_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q;
	protected AbstractElementAlias match_XImportDeclaration_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (XtxtUMLGrammarAccess) access;
		match_TUClassMember_SemicolonKeyword_1_1_1_6_q = new TokenAlias(false, true, grammarAccess.getTUClassMemberAccess().getSemicolonKeyword_1_1_1_6());
		match_TUClass_SemicolonKeyword_3_0_3_q = new TokenAlias(false, true, grammarAccess.getTUClassAccess().getSemicolonKeyword_3_0_3());
		match_TUClass_SemicolonKeyword_3_1_or___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_2_SemicolonKeyword_3_0_3_q__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTUClassAccess().getLeftCurlyBracketKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getTUClassAccess().getRightCurlyBracketKeyword_3_0_2()), new TokenAlias(false, true, grammarAccess.getTUClassAccess().getSemicolonKeyword_3_0_3())), new TokenAlias(false, false, grammarAccess.getTUClassAccess().getSemicolonKeyword_3_1()));
		match_TUConstructor_SemicolonKeyword_6_q = new TokenAlias(false, true, grammarAccess.getTUConstructorAccess().getSemicolonKeyword_6());
		match_TUEntryOrExitActivity_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getTUEntryOrExitActivityAccess().getSemicolonKeyword_2());
		match_TUFile_SemicolonKeyword_1_0_2_q = new TokenAlias(false, true, grammarAccess.getTUFileAccess().getSemicolonKeyword_1_0_2());
		match_TUSignal_SemicolonKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getTUSignalAccess().getSemicolonKeyword_2_0_3());
		match_TUSignal_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTUSignalAccess().getLeftCurlyBracketKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getTUSignalAccess().getRightCurlyBracketKeyword_2_0_2()), new TokenAlias(false, true, grammarAccess.getTUSignalAccess().getSemicolonKeyword_2_0_3())), new TokenAlias(false, false, grammarAccess.getTUSignalAccess().getSemicolonKeyword_2_1()));
		match_TUState_SemicolonKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getTUStateAccess().getSemicolonKeyword_2_0_3());
		match_TUState_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTUStateAccess().getLeftCurlyBracketKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getTUStateAccess().getRightCurlyBracketKeyword_2_0_2()), new TokenAlias(false, true, grammarAccess.getTUStateAccess().getSemicolonKeyword_2_0_3())), new TokenAlias(false, false, grammarAccess.getTUStateAccess().getSemicolonKeyword_2_1()));
		match_TUTransitionEffect_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getTUTransitionEffectAccess().getSemicolonKeyword_2());
		match_TUTransitionGuard_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getTUTransitionGuardAccess().getSemicolonKeyword_4());
		match_TUTransition_SemicolonKeyword_5_q = new TokenAlias(false, true, grammarAccess.getTUTransitionAccess().getSemicolonKeyword_5());
		match_XExpressionInClosure_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
		match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()));
		match_XImportDeclaration_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
		match_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getXParenthesizedRAlfExpressionAccess().getLeftParenthesisKeyword_0());
		match_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getXParenthesizedRAlfExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getOpSingleAssignRule())
			return getOpSingleAssignToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * OpSingleAssign:
	 * 	'='
	 * ;
	 */
	protected String getOpSingleAssignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_TUClassMember_SemicolonKeyword_1_1_1_6_q.equals(syntax))
				emit_TUClassMember_SemicolonKeyword_1_1_1_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUClass_SemicolonKeyword_3_0_3_q.equals(syntax))
				emit_TUClass_SemicolonKeyword_3_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUClass_SemicolonKeyword_3_1_or___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_2_SemicolonKeyword_3_0_3_q__.equals(syntax))
				emit_TUClass_SemicolonKeyword_3_1_or___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_2_SemicolonKeyword_3_0_3_q__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUConstructor_SemicolonKeyword_6_q.equals(syntax))
				emit_TUConstructor_SemicolonKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUEntryOrExitActivity_SemicolonKeyword_2_q.equals(syntax))
				emit_TUEntryOrExitActivity_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUFile_SemicolonKeyword_1_0_2_q.equals(syntax))
				emit_TUFile_SemicolonKeyword_1_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUSignal_SemicolonKeyword_2_0_3_q.equals(syntax))
				emit_TUSignal_SemicolonKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUSignal_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__.equals(syntax))
				emit_TUSignal_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUState_SemicolonKeyword_2_0_3_q.equals(syntax))
				emit_TUState_SemicolonKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUState_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__.equals(syntax))
				emit_TUState_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUTransitionEffect_SemicolonKeyword_2_q.equals(syntax))
				emit_TUTransitionEffect_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUTransitionGuard_SemicolonKeyword_4_q.equals(syntax))
				emit_TUTransitionGuard_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TUTransition_SemicolonKeyword_5_q.equals(syntax))
				emit_TUTransition_SemicolonKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XExpressionInClosure_SemicolonKeyword_1_1_q.equals(syntax))
				emit_XExpressionInClosure_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q.equals(syntax))
				emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XImportDeclaration_SemicolonKeyword_2_q.equals(syntax))
				emit_XImportDeclaration_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=XBlockExpression (ambiguity) (rule end)
	 */
	protected void emit_TUClassMember_SemicolonKeyword_1_1_1_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     members+=TUClassMember '}' (ambiguity) (rule end)
	 */
	protected void emit_TUClass_SemicolonKeyword_3_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}' ';'?)
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ValidID (ambiguity) (rule end)
	 *     superClass=[TUClass|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_TUClass_SemicolonKeyword_3_1_or___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_2_SemicolonKeyword_3_0_3_q__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=XBlockExpression (ambiguity) (rule end)
	 */
	protected void emit_TUConstructor_SemicolonKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=XBlockExpression (ambiguity) (rule end)
	 */
	protected void emit_TUEntryOrExitActivity_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=QualifiedName (ambiguity) (rule end)
	 *     name=QualifiedName (ambiguity) elements+=TUModelElement
	 *     name=QualifiedName (ambiguity) importSection=XImportSection
	 */
	protected void emit_TUFile_SemicolonKeyword_1_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=TUSignalAttribute '}' (ambiguity) (rule end)
	 */
	protected void emit_TUSignal_SemicolonKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}' ';'?)
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ValidID (ambiguity) (rule end)
	 */
	protected void emit_TUSignal_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     members+=TUStateMember '}' (ambiguity) (rule end)
	 */
	protected void emit_TUState_SemicolonKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}' ';'?)
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ValidID (ambiguity) (rule end)
	 */
	protected void emit_TUState_SemicolonKeyword_2_1_or___LeftCurlyBracketKeyword_2_0_0_RightCurlyBracketKeyword_2_0_2_SemicolonKeyword_2_0_3_q__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=XBlockExpression (ambiguity) (rule end)
	 */
	protected void emit_TUTransitionEffect_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     else?='else' ')' (ambiguity) (rule end)
	 *     expression=XExpression ')' (ambiguity) (rule end)
	 */
	protected void emit_TUTransitionGuard_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     members+=TUTransitionMember '}' (ambiguity) (rule end)
	 *     name=ValidID '{' '}' (ambiguity) (rule end)
	 */
	protected void emit_TUTransition_SemicolonKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 */
	protected void emit_XExpressionInClosure_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '=>' returnType=JvmTypeReference
	 */
	protected void emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     importedNamespace=QualifiedNameWithWildcard (ambiguity) (rule end)
	 *     importedType=[JvmDeclaredType|QualifiedName] (ambiguity) (rule end)
	 *     memberName=ValidID (ambiguity) (rule end)
	 *     wildcard?='*' (ambiguity) (rule end)
	 */
	protected void emit_XImportDeclaration_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) 'false' ')' (rule start)
	 *     (rule start) '(' (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) '(' (ambiguity) 'null' ')' (rule start)
	 *     (rule start) '(' (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) '(' (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) '(' (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) '(' (ambiguity) isTrue?='true'
	 *     (rule start) '(' (ambiguity) sigdata='sigdata'
	 *     (rule start) '(' (ambiguity) value=Number
	 *     (rule start) '(' (ambiguity) value=STRING
	 *     (rule start) '(' (ambiguity) {RAlfAssocNavExpression.left=}
	 *     (rule start) '(' (ambiguity) {XAssignment.assignable=}
	 *     (rule start) '(' (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) '(' (ambiguity) {XCastedExpression.target=}
	 *     (rule start) '(' (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) '(' (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) '(' (ambiguity) {XPostfixOperation.operand=}
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) sigdata='sigdata'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {RAlfAssocNavExpression.left=}
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) sigdata='sigdata'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {RAlfAssocNavExpression.left=}
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedRAlfExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
